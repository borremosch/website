{"version":3,"sources":["MathsApp/FunctionReference/FunctionReference.module.css","App.module.css","Fireflies/Fireflies.module.css","MathsApp/Manual/Manual.module.css","Overview/Overview.module.css","MathsApp/MathsApp.module.css","Images/play-store-badge.svg","Fireflies/Fireflies.tsx","MathsApp/FunctionReference/functions.tsx","MathsApp/FunctionReference/ParameterType.tsx","MathsApp/FunctionReference/FunctionExampleItem.tsx","MathsApp/FunctionReference/FunctionExample.tsx","MathsApp/FunctionReference/FunctionRelated.tsx","MathsApp/FunctionReference/Function.tsx","MathsApp/FunctionReference/FunctionCategory.tsx","MathsApp/FunctionReference/FunctionReference.tsx","Images/screen-overview.png","MathsApp/Manual/Manual.tsx","MathsApp/Get/Get.tsx","MathsApp/MathsApp.tsx","Images/feature-graphic-fireflies.jpg","Images/feature-graphic-mathsapp.jpg","Overview/Overview.tsx","PrivacyStatement/PrivacyStatement.tsx","Contact/Contact.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Fireflies","className","styles","Typography","variant","Link","href","target","src","playStoreBadge","alt","width","height","title","frameBorder","allow","allowFullScreen","ParameterType","getFunctionIdentifier","name","toLowerCase","replace","FUNCTION_CATEGORIES","functions","symbol","syntax","parameters","type","ComplexNumber","description","examples","items","contents","related","SquareMatrix","List","Matrix","RealNumber","NaturalNumber","PValue","Integer","Any","Variable","ParameterTypeComponent","Tooltip","FunctionExampleItemComponent","FunctionExampleComponent","map","item","i","FunctionRelated","relatedItem","FunctionComponent","syntaxArray","Array","isArray","hash","useLocation","id","useMemo","useState","isExpanded","setIsExpanded","toggleExpand","useCallback","wasExpanded","useEffect","Accordion","TransitionProps","unmountOnExit","expanded","onClick","AccordionSummary","expandIcon","AccordionDetails","style","listStyleType","length","syntaxExample","parameter","types","j","example","FunctionCategoryComponent","func","FunctionReference","category","Manual","Paper","disablePadding","ListSubheader","ListItem","button","screenOverviewImage","left","top","paragraph","mathsappStyles","Get","window","location","MathsApp","pathname","history","useHistory","isFunctionReferenceSelected","exec","Tabs","value","centered","Tab","push","label","path","Overview","to","firefliesFeatureGraphic","mathsAppFeatureGraphic","PrivacyStatement","Contact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","theme","createMuiTheme","typography","h1","fontSize","marginTop","marginBottom","h2","h3","h4","props","MuiTooltip","interactive","leaveDelay","enterTouchDelay","leaveTouchDelay","overrides","tooltip","ReactDOM","render","StrictMode","CssBaseline","ThemeProvider","document","getElementById","console","log"],"mappings":"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","file":"static/js/main.2e74450b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"syntax\":\"FunctionReference_syntax__iD39x\",\"type\":\"FunctionReference_type__3E0aS\",\"parameter-type\":\"FunctionReference_parameter-type__3aDwe\",\"function-details\":\"FunctionReference_function-details__5QJNm\",\"function-name\":\"FunctionReference_function-name__1nT3A\",\"function-symbol\":\"FunctionReference_function-symbol__bJEHK\",\"accordion\":\"FunctionReference_accordion__mkLgc\",\"matrix\":\"FunctionReference_matrix__290es\",\"matrix-inner\":\"FunctionReference_matrix-inner__1LjxP\",\"matrix-row\":\"FunctionReference_matrix-row__RU5-L\",\"matrix-cell\":\"FunctionReference_matrix-cell__3tkNc\",\"syntax-where\":\"FunctionReference_syntax-where__1RsFW\",\"syntax-list\":\"FunctionReference_syntax-list__1YJNd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page-container\":\"App_page-container__2PAvr\",\"page\":\"App_page__CKP-2\",\"page-content\":\"App_page-content__O64n4\",\"tabs\":\"App_tabs__1Z93U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Fireflies_container__2Vl10\",\"heading\":\"Fireflies_heading__1E5uQ\",\"description-container\":\"Fireflies_description-container__3Ec7g\",\"description\":\"Fireflies_description__mK4U3\",\"video-container\":\"Fireflies_video-container__zlrim\",\"video-container-inner\":\"Fireflies_video-container-inner__Bn7si\",\"video\":\"Fireflies_video__3tcFD\",\"play-store-badge\":\"Fireflies_play-store-badge__KxrBB\",\"attribution\":\"Fireflies_attribution__2_kC1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table-of-contents\":\"Manual_table-of-contents__wlI3F\",\"nested-listitem\":\"Manual_nested-listitem__2D5O_\",\"screen-overview-container\":\"Manual_screen-overview-container__3YUso\",\"screen-overview\":\"Manual_screen-overview__yB8Eb\",\"legend\":\"Manual_legend__2wiS2\",\"legend-horizontal\":\"Manual_legend-horizontal__1XmSW\",\"legend-black\":\"Manual_legend-black__3l-Qu\",\"legend-top\":\"Manual_legend-top__1XBDH\",\"legend-label\":\"Manual_legend-label__VDEIv\",\"paid-version\":\"Manual_paid-version__3Eryw\",\"button-sequence\":\"Manual_button-sequence__171w6\",\"button\":\"Manual_button__qVnPi\",\"button-basic-operation\":\"Manual_button-basic-operation__1MHSu\",\"button-function\":\"Manual_button-function__3jjPB\",\"button-numeric\":\"Manual_button-numeric__1zchb\",\"shift\":\"Manual_shift__2eUkD\",\"alpha\":\"Manual_alpha__3YOuV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"overview\":\"Overview_overview__32guK\",\"app\":\"Overview_app__2YU9p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"example\":\"MathsApp_example__1g-kC\",\"description\":\"MathsApp_description__29rpY\",\"screen\":\"MathsApp_screen__Gcjw3\",\"input\":\"MathsApp_input__1ZWIy\",\"output\":\"MathsApp_output__J9pvD\",\"error\":\"MathsApp_error__3Jol6\"};","export default __webpack_public_path__ + \"static/media/play-store-badge.777556f2.svg\";","import { Link, Typography } from '@material-ui/core';\nimport styles from './Fireflies.module.css';\nimport playStoreBadge from '../Images/play-store-badge.svg';\n\nexport function Fireflies() {\n  return (\n    <div className={styles['container']}>\n      <Typography variant=\"h1\" className={styles['heading']}>\n        Fireflies\n      </Typography>\n\n      <div className={styles['description-container']}>\n        <Typography variant=\"body1\" className={styles['description']}>\n          Fireflies is a variant of the Japanese game known as Hashiwokakero, or Hashi. In English, the game is commonly\n          known as Bridges.\n        </Typography>\n\n        <Typography variant=\"body1\" className={styles['description']}>\n          Fireflies was explicitly designed to be a relaxing game. We feel that many modern games are too much designed\n          to make you addicted. Instead, we hope the puzzles in this game will give you a sense of satisfaction and\n          accomplishment rather than an urge to play the next level.\n        </Typography>\n\n        <Typography variant=\"body1\" className={styles['description']}>\n          Fireflies contains thousands of puzzles of several sizes and levels of difficulty. For each puzzle that you\n          complete, you are rewarded a firefly. These fireflies do not serve a specific purpose other than for you to\n          look at and enjoy them.\n        </Typography>\n      </div>\n\n      <Link href=\"https://play.google.com/store/apps/details?id=com.labs4073.fireflies\" target=\"_blank\">\n        <img src={playStoreBadge} alt=\"Get is on Google Play\" width=\"200\" className={styles['play-store-badge']} />\n      </Link>\n\n      <div className={styles['video-container']}>\n        <div className={styles['video-container-inner']}>\n          <iframe\n            width=\"100%\"\n            height=\"100%\"\n            src=\"https://www.youtube-nocookie.com/embed/pNfAgoahAQc\"\n            title=\"YouTube video player\"\n            frameBorder=\"0\"\n            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n            allowFullScreen={true}\n            className={styles['video']}\n          ></iframe>\n        </div>\n      </div>\n\n      <div className={styles['attribution']}>\n        <Link href=\"https://unsplash.com/photos/y1fcIQhSu7Q\" target=\"_blank\">\n          Photo\n        </Link>{' '}\n        by{' '}\n        <Link href=\"https://unsplash.com/@evondeveloper\" target=\"_blank\">\n          Trần Anh Tuấn\n        </Link>{' '}\n        on{' '}\n        <Link href=\"https://unsplash.com/\" target=\"_blank\">\n          Unsplash\n        </Link>\n      </div>\n    </div>\n  );\n}\n","import styles from './FunctionReference.module.css';\n\nexport interface FunctionCategory {\n  name: string;\n  functions: Function[];\n}\n\nexport enum ParameterType {\n  NaturalNumber,\n  Integer,\n  RealNumber,\n  ComplexNumber,\n  List,\n  Matrix,\n  SquareMatrix,\n  PValue,\n  Any,\n  Variable,\n}\n\nexport interface Function {\n  name: string;\n  symbol?: React.ReactNode;\n  syntax: React.ReactNode;\n  parameters: FunctionParameter[];\n  description: React.ReactNode;\n  examples?: FunctionExample[];\n  related?: string[];\n}\n\nexport interface FunctionExample {\n  description: React.ReactNode;\n  items: FunctionExampleItem[];\n}\n\nexport interface FunctionExampleItem {\n  type: 'input' | 'output';\n  contents: React.ReactNode;\n}\n\nexport interface FunctionParameter {\n  name: string;\n  type: ParameterType | ParameterType[];\n  description?: string;\n}\n\nexport function getFunctionIdentifier(name: string) {\n  return name\n    .toLowerCase()\n    .replace(/<(?:.|\\n)*?>/gm, '')\n    .replace(/[^a-z0-9]/g, '');\n}\n\nexport const FUNCTION_CATEGORIES: FunctionCategory[] = [\n  {\n    name: 'Arithmetic functions',\n    functions: [\n      {\n        name: 'Add',\n        symbol: '+',\n        syntax: 'value1 + value2',\n        parameters: [\n          {\n            name: 'value1',\n            type: ParameterType.ComplexNumber,\n          },\n          {\n            name: 'value2',\n            type: ParameterType.ComplexNumber,\n          },\n        ],\n        description: 'Adds two numbers together.',\n        examples: [\n          {\n            description: 'Example: adding two numbers',\n            items: [\n              { type: 'input', contents: '53 + 47' },\n              { type: 'output', contents: '100' },\n            ],\n          },\n          {\n            description: 'Example: adding two lists',\n            items: [\n              { type: 'input', contents: '{1, 2} + {3, 4}' },\n              { type: 'output', contents: '{4, 6}' },\n            ],\n          },\n          {\n            description: 'Example: adding a scalar value to a matrix',\n            items: [\n              {\n                type: 'input',\n                contents: (\n                  <>\n                    <div className={styles['matrix']}>\n                      <div className={styles['matrix-inner']}>\n                        <div className={styles['matrix-row']}>\n                          <div className={styles['matrix-cell']}>1</div>\n                          <div className={styles['matrix-cell']}>2</div>\n                        </div>\n                        <div className={styles['matrix-row']}>\n                          <div className={styles['matrix-cell']}>3</div>\n                          <div className={styles['matrix-cell']}>4</div>\n                        </div>\n                      </div>\n                    </div>{' '}\n                    + 5\n                  </>\n                ),\n              },\n              {\n                type: 'output',\n                contents: (\n                  <>\n                    <div className={styles['matrix']}>\n                      <div className={styles['matrix-inner']}>\n                        <div className={styles['matrix-row']}>\n                          <div className={styles['matrix-cell']}>6</div>\n                          <div className={styles['matrix-cell']}>7</div>\n                        </div>\n                        <div className={styles['matrix-row']}>\n                          <div className={styles['matrix-cell']}>8</div>\n                          <div className={styles['matrix-cell']}>9</div>\n                        </div>\n                      </div>\n                    </div>\n                  </>\n                ),\n              },\n            ],\n          },\n        ],\n        related: ['subtract', 'multiply', 'divide'],\n      },\n      {\n        name: 'Subtract',\n        symbol: '−',\n        syntax: 'value1 − value2',\n        parameters: [\n          {\n            name: 'value1',\n            type: ParameterType.ComplexNumber,\n          },\n          {\n            name: 'value2',\n            type: ParameterType.ComplexNumber,\n          },\n        ],\n        description: (\n          <>\n            Subtracts two numbers. Not to be confused with the negate operator, which is a unary operator, applied to\n            one value only.\n          </>\n        ),\n        examples: [\n          {\n            description: 'Example: subtracting two numbers',\n            items: [\n              { type: 'input', contents: '53 - 47' },\n              { type: 'output', contents: '6' },\n            ],\n          },\n          {\n            description: 'Example: subtracting a scalar from a list',\n            items: [\n              { type: 'input', contents: '{7, 9, 11} - 4' },\n              { type: 'output', contents: '{3, 5, 7}' },\n            ],\n          },\n        ],\n        related: ['negate', 'add', 'multiply', 'divide'],\n      },\n      {\n        name: 'Multiply',\n        symbol: '×',\n        syntax: 'value1 × value2',\n        parameters: [\n          {\n            name: 'value1',\n            type: ParameterType.ComplexNumber,\n          },\n          {\n            name: 'value2',\n            type: ParameterType.ComplexNumber,\n          },\n        ],\n        description:\n          'Multiplies two numbers. When multiplying two matrices, the multiply operator does not simply multiply the values inside the matrix, but produces the matrix product. To get the matrix product of two matrices, the width of the left operand must be equal to the height of the right operand.',\n        examples: [\n          {\n            description: 'Example: multiplying two numbers',\n            items: [\n              { type: 'input', contents: '53 × 47' },\n              { type: 'output', contents: '2491' },\n            ],\n          },\n          {\n            description: 'Example: multiplying a list with a scalar',\n            items: [\n              { type: 'input', contents: '{7, 9, 11} * 4' },\n              { type: 'output', contents: '{28, 36, 44}' },\n            ],\n          },\n          {\n            description: 'Example: matrix multiplication',\n            items: [\n              {\n                type: 'input',\n                contents: (\n                  <>\n                    <div className={styles['matrix']}>\n                      <div className={styles['matrix-inner']}>\n                        <div className={styles['matrix-row']}>\n                          <div className={styles['matrix-cell']}>4</div>\n                          <div className={styles['matrix-cell']}>6</div>\n                        </div>\n                        <div className={styles['matrix-row']}>\n                          <div className={styles['matrix-cell']}>-3</div>\n                          <div className={styles['matrix-cell']}>8</div>\n                        </div>\n                      </div>\n                    </div>\n                    ×\n                    <div className={styles['matrix']}>\n                      <div className={styles['matrix-inner']}>\n                        <div className={styles['matrix-row']}>\n                          <div className={styles['matrix-cell']}>7</div>\n                          <div className={styles['matrix-cell']}>9</div>\n                          <div className={styles['matrix-cell']}>-4</div>\n                        </div>\n                        <div className={styles['matrix-row']}>\n                          <div className={styles['matrix-cell']}>2</div>\n                          <div className={styles['matrix-cell']}>3</div>\n                          <div className={styles['matrix-cell']}>6</div>\n                        </div>\n                      </div>\n                    </div>\n                  </>\n                ),\n              },\n              {\n                type: 'output',\n                contents: (\n                  <>\n                    <div className={styles['matrix']}>\n                      <div className={styles['matrix-inner']}>\n                        <div className={styles['matrix-row']}>\n                          <div className={styles['matrix-cell']}>40</div>\n                          <div className={styles['matrix-cell']}>54</div>\n                          <div className={styles['matrix-cell']}>20</div>\n                        </div>\n                        <div className={styles['matrix-row']}>\n                          <div className={styles['matrix-cell']}>-5</div>\n                          <div className={styles['matrix-cell']}>-3</div>\n                          <div className={styles['matrix-cell']}>60</div>\n                        </div>\n                      </div>\n                    </div>\n                  </>\n                ),\n              },\n            ],\n          },\n        ],\n        related: ['add', 'subtract', 'divide'],\n      },\n      {\n        name: 'Divide',\n        symbol: '/',\n        syntax: 'value1 / value2',\n        parameters: [\n          {\n            name: 'value1',\n            type: ParameterType.ComplexNumber,\n            description: 'numerator',\n          },\n          {\n            name: 'value2',\n            type: ParameterType.ComplexNumber,\n            description: 'denominator, non-zero',\n          },\n        ],\n        description: 'Divides two numbers.',\n        examples: [\n          {\n            description: 'Example: dividing two numbers',\n            items: [\n              { type: 'input', contents: '20 / 8' },\n              { type: 'output', contents: '2.5' },\n            ],\n          },\n          {\n            description: 'Example: dividing a list by a scalar',\n            items: [\n              { type: 'input', contents: '{7, 9, 11} / 2' },\n              { type: 'output', contents: '{3.5, 4.5, 5.5}' },\n            ],\n          },\n        ],\n        related: ['add', 'subtract', 'multiply'],\n      },\n      {\n        name: 'Negate',\n        symbol: '-',\n        syntax: '-value',\n        parameters: [\n          {\n            name: 'value',\n            type: ParameterType.ComplexNumber,\n          },\n        ],\n        description:\n          'Negates a number. Not to be confused with the subtract operator, which subtracts one value from another.',\n        examples: [\n          {\n            description: 'Example: negating a numbers',\n            items: [\n              { type: 'input', contents: '-53' },\n              { type: 'output', contents: '-53' },\n            ],\n          },\n          {\n            description: 'Example: negating a list',\n            items: [\n              { type: 'input', contents: '-{7, 9, 11}' },\n              { type: 'output', contents: '{-7, -9, -11}' },\n            ],\n          },\n          {\n            description: 'Example: negating a matrix',\n            items: [\n              {\n                type: 'input',\n                contents: (\n                  <>\n                    -\n                    <div className={styles['matrix']}>\n                      <div className={styles['matrix-inner']}>\n                        <div className={styles['matrix-row']}>\n                          <div className={styles['matrix-cell']}>4</div>\n                          <div className={styles['matrix-cell']}>6</div>\n                        </div>\n                        <div className={styles['matrix-row']}>\n                          <div className={styles['matrix-cell']}>-3</div>\n                          <div className={styles['matrix-cell']}>8</div>\n                        </div>\n                      </div>\n                    </div>\n                  </>\n                ),\n              },\n              {\n                type: 'output',\n                contents: (\n                  <>\n                    <div className={styles['matrix']}>\n                      <div className={styles['matrix-inner']}>\n                        <div className={styles['matrix-row']}>\n                          <div className={styles['matrix-cell']}>-4</div>\n                          <div className={styles['matrix-cell']}>-6</div>\n                        </div>\n                        <div className={styles['matrix-row']}>\n                          <div className={styles['matrix-cell']}>3</div>\n                          <div className={styles['matrix-cell']}>-8</div>\n                        </div>\n                      </div>\n                    </div>\n                  </>\n                ),\n              },\n            ],\n          },\n        ],\n        related: ['add', 'subtract', 'multiply', 'divide'],\n      },\n    ],\n  },\n\n  {\n    name: 'Exponentiation functions',\n    functions: [\n      {\n        name: 'power',\n        symbol: '^',\n        syntax: 'x^y',\n        parameters: [\n          {\n            name: 'x',\n            type: ParameterType.ComplexNumber,\n            description: 'base',\n          },\n          {\n            name: 'y',\n            type: ParameterType.ComplexNumber,\n            description: 'exponent',\n          },\n        ],\n        description: (\n          <>\n            Calculates <code>x</code> raised to the power <code>y</code>.\n          </>\n        ),\n        examples: [\n          {\n            description: (\n              <>\n                Example: calculating 2<sup>-2</sup>\n              </>\n            ),\n            items: [\n              { type: 'input', contents: '2^-2' },\n              { type: 'output', contents: '0.25' },\n            ],\n          },\n          {\n            description: 'calculating 4³',\n            items: [\n              {\n                type: 'input',\n                contents: '4^3',\n              },\n              {\n                type: 'output',\n                contents: '64',\n              },\n            ],\n          },\n        ],\n        related: ['root', 'square', 'power of e', 'power of 10'],\n      },\n      {\n        name: 'root',\n        symbol: (\n          <>\n            <sup>x</sup>√\n          </>\n        ),\n        syntax: (\n          <>\n            n<sup>x</sup>√(value)\n          </>\n        ),\n        parameters: [\n          {\n            name: 'n',\n            type: ParameterType.ComplexNumber,\n            description: 'degree',\n          },\n          {\n            name: 'value',\n            type: ParameterType.ComplexNumber,\n          },\n        ],\n        description: (\n          <>\n            Calculates the <code>n</code>\n            <sup>th</sup> root of <code>value</code>.\n          </>\n        ),\n        examples: [\n          {\n            description: 'Example: calculating cube root of 125',\n            items: [\n              {\n                type: 'input',\n                contents: (\n                  <>\n                    3<sup>x</sup>√(125)\n                  </>\n                ),\n              },\n              { type: 'output', contents: '5' },\n            ],\n          },\n          {\n            description: (\n              <>\n                Example: calculating the 5<sup>th</sup> root of 32\n              </>\n            ),\n            items: [\n              {\n                type: 'input',\n                contents: (\n                  <>\n                    5<sup>x</sup>√(32)\n                  </>\n                ),\n              },\n              { type: 'output', contents: '2' },\n            ],\n          },\n        ],\n        related: ['power', 'square root'],\n      },\n      {\n        name: 'square',\n        symbol: <>x²</>,\n        syntax: <>x²</>,\n        parameters: [\n          {\n            name: 'x',\n            type: ParameterType.ComplexNumber,\n            description: 'base',\n          },\n        ],\n        description: (\n          <>\n            Calculates the square of <code>x</code>.\n          </>\n        ),\n        examples: [\n          {\n            description: 'Example: calculate the square of 8',\n            items: [\n              { type: 'input', contents: '8²' },\n              { type: 'output', contents: '64' },\n            ],\n          },\n        ],\n        related: ['square root', 'power'],\n      },\n      {\n        name: 'square root',\n        symbol: '√',\n        syntax: '√(value)',\n        parameters: [\n          {\n            name: 'value',\n            type: ParameterType.ComplexNumber,\n          },\n        ],\n        description: (\n          <>\n            Calculates the square root of <code>value</code>\n          </>\n        ),\n        examples: [\n          {\n            description: 'Example: calculate the square root of 49',\n            items: [\n              { type: 'input', contents: '√(49)' },\n              { type: 'output', contents: '7' },\n            ],\n          },\n        ],\n        related: ['square', 'root'],\n      },\n      {\n        name: 'power of e',\n        symbol: 'e^',\n        syntax: 'e^(value)',\n        parameters: [\n          {\n            name: 'value',\n            type: ParameterType.ComplexNumber,\n            description: 'exponent',\n          },\n        ],\n        description: (\n          <>\n            Calculates e raised to the power <code>value</code>\n          </>\n        ),\n        examples: [\n          {\n            description: (\n              <>\n                Example: calculate e<sup>iπ</sup>\n              </>\n            ),\n            items: [\n              { type: 'input', contents: 'e^(iπ)' },\n              { type: 'output', contents: '-1' },\n            ],\n          },\n        ],\n        related: ['natural logarithm', 'power', 'power of 10'],\n      },\n      {\n        name: 'natural logarithm',\n        symbol: 'ln',\n        syntax: 'ln(value)',\n        parameters: [\n          {\n            name: 'value',\n            type: ParameterType.ComplexNumber,\n            description: 'non-zero',\n          },\n        ],\n        description: (\n          <>\n            Calculates the natural logarithm of a number. In other words, the outcome is the exponent to which e must be\n            raised, in order to get the input value. In order to get the n-log of a number c, you can use ln(c) / ln(n)\n            (see example 2).\n          </>\n        ),\n        examples: [\n          {\n            description: 'Example: getting natural logarithm of e',\n            items: [\n              { type: 'input', contents: 'ln(e)' },\n              { type: 'output', contents: '1' },\n            ],\n          },\n          {\n            description: 'Example: getting the ₂log of 32',\n            items: [\n              { type: 'input', contents: 'ln(32) / ln(2)' },\n              { type: 'output', contents: '5' },\n            ],\n          },\n        ],\n        related: ['power of e', 'logarithm'],\n      },\n      {\n        name: 'power of 10',\n        symbol: (\n          <>\n            10<sup>x</sup>\n          </>\n        ),\n        syntax: (\n          <>\n            10<sup>x</sup>(value)\n          </>\n        ),\n        parameters: [\n          {\n            name: 'value',\n            type: ParameterType.ComplexNumber,\n            description: 'exponent',\n          },\n        ],\n        description: (\n          <>\n            Calculates 10 raised to the power <code>value</code>\n          </>\n        ),\n        examples: [\n          {\n            description: (\n              <>\n                Example: calculate 10<sup>3</sup>\n              </>\n            ),\n            items: [\n              { type: 'input', contents: '10^(3)' },\n              { type: 'output', contents: '1000' },\n            ],\n          },\n        ],\n        related: ['logarithm', 'power', 'power of e'],\n      },\n      {\n        name: 'logarithm',\n        symbol: 'log',\n        syntax: 'log(value)',\n        parameters: [\n          {\n            name: 'value',\n            type: ParameterType.ComplexNumber,\n            description: 'non-zero',\n          },\n        ],\n        description: (\n          <>\n            Calculates the <sub>10</sub>log of a number. In other words, the outcome is the exponent to which 10 must be\n            raised, in order to get the input value. In order to get the n-log of a number c, you can use log(c) /\n            log(n) (see example 2).\n          </>\n        ),\n        examples: [\n          {\n            description: (\n              <>\n                Example: getting the <sub>10</sub>log of 100\n              </>\n            ),\n            items: [\n              { type: 'input', contents: 'log(100)' },\n              { type: 'output', contents: '2' },\n            ],\n          },\n          {\n            description: 'Example: getting the ₂log of 32',\n            items: [\n              { type: 'input', contents: 'log(32) / log(2)' },\n              { type: 'output', contents: '5' },\n            ],\n          },\n        ],\n        related: ['power of 10', 'natural logarithm'],\n      },\n      {\n        name: 'reciprocal',\n        symbol: (\n          <>\n            x<sup>-1</sup>\n          </>\n        ),\n        syntax: (\n          <>\n            x<sup>-1</sup>\n          </>\n        ),\n        parameters: [\n          {\n            name: 'x',\n            type: [ParameterType.ComplexNumber, ParameterType.SquareMatrix],\n          },\n        ],\n        description: (\n          <>\n            Calculates the reciprocal of <code>x</code>, or 1 / <code>x</code>. When applied to a matrix, the reciprocal\n            operator returns the inverse matrix.\n          </>\n        ),\n        examples: [\n          {\n            description: 'Example: getting the reciprocal of 25',\n            items: [\n              {\n                type: 'input',\n                contents: (\n                  <>\n                    25<sup>-1</sup>\n                  </>\n                ),\n              },\n              { type: 'output', contents: '.04' },\n            ],\n          },\n          {\n            description: 'Example: calculating an inverse matrix',\n            items: [\n              {\n                type: 'input',\n                contents: (\n                  <>\n                    <div className={styles['matrix']}>\n                      <div className={styles['matrix-inner']}>\n                        <div className={styles['matrix-row']}>\n                          <div className={styles['matrix-cell']}>4</div>\n                          <div className={styles['matrix-cell']}>6</div>\n                        </div>\n                        <div className={styles['matrix-row']}>\n                          <div className={styles['matrix-cell']}>-3</div>\n                          <div className={styles['matrix-cell']}>8</div>\n                        </div>\n                      </div>\n                    </div>\n                    <sup>-1</sup>\n                  </>\n                ),\n              },\n              {\n                type: 'output',\n                contents: (\n                  <>\n                    <div className={styles['matrix']}>\n                      <div className={styles['matrix-inner']}>\n                        <div className={styles['matrix-row']}>\n                          <div className={styles['matrix-cell']}>0.16</div>\n                          <div className={styles['matrix-cell']}>-0.12</div>\n                        </div>\n                        <div className={styles['matrix-row']}>\n                          <div className={styles['matrix-cell']}>0.06</div>\n                          <div className={styles['matrix-cell']}>0.08</div>\n                        </div>\n                      </div>\n                    </div>\n                  </>\n                ),\n              },\n            ],\n          },\n        ],\n        related: ['power'],\n      },\n    ],\n  },\n\n  {\n    name: 'Trigonometric functions',\n    functions: [\n      {\n        name: 'sine',\n        symbol: 'sin',\n        syntax: 'sin(∠)',\n        parameters: [\n          {\n            name: '∠value',\n            type: ParameterType.ComplexNumber,\n            description: 'angle in degrees or radians, depending on the current settings',\n          },\n        ],\n        description: (\n          <>\n            Calculates the sine of <code>∠value</code>. Depending on the settings, the unit of the input may be either\n            radians or degrees.\n          </>\n        ),\n        examples: [\n          {\n            description: 'Example: calculating the sine of π (degree mode)',\n            items: [\n              { type: 'input', contents: 'sin(π)' },\n              { type: 'output', contents: '0.054803665' },\n            ],\n          },\n          {\n            description: 'Example: calculating the sine of π (radian mode)',\n            items: [\n              { type: 'input', contents: 'sin(π)' },\n              { type: 'output', contents: '0' },\n            ],\n          },\n        ],\n        related: ['inverse sine', 'cosine', 'tangent'],\n      },\n      {\n        name: 'cosine',\n        symbol: 'cos',\n        syntax: 'cos(∠value)',\n        parameters: [\n          {\n            name: '∠value',\n            type: ParameterType.ComplexNumber,\n            description: 'angle in degrees or radians, depending on the current settings',\n          },\n        ],\n        description: (\n          <>\n            Calculates the cosine of <code>∠value</code>. Depending on the settings, the unit of the input may be either\n            radians or degrees.\n          </>\n        ),\n        examples: [\n          {\n            description: 'Example: calculating the cosine of 180 (degree mode)',\n            items: [\n              { type: 'input', contents: 'cos(180)' },\n              { type: 'output', contents: '-1' },\n            ],\n          },\n          {\n            description: 'Example: calculating the cosine of 180 (radian mode)',\n            items: [\n              { type: 'input', contents: 'cos(180)' },\n              { type: 'output', contents: '-0.59846007' },\n            ],\n          },\n        ],\n        related: ['inverse cosine', 'sine', 'tangent'],\n      },\n      {\n        name: 'tangent',\n        symbol: 'tan',\n        syntax: 'tan(∠)',\n        parameters: [\n          {\n            name: '∠value',\n            type: ParameterType.ComplexNumber,\n            description: 'angle in degrees or radians, depending on the current settings',\n          },\n        ],\n        description: (\n          <>\n            Calculates the tangent of <code>∠value</code>. Depending on the settings, the unit of the input may be\n            either radians or degrees.\n          </>\n        ),\n        examples: [\n          {\n            description: 'Example: calculating the tangent of 45 (degree mode)',\n            items: [\n              { type: 'input', contents: 'tan(45)' },\n              { type: 'output', contents: '1' },\n            ],\n          },\n        ],\n        related: ['inverse tangent', 'sine', 'cosine'],\n      },\n      {\n        name: 'inverse sine',\n        symbol: (\n          <>\n            sin<sup>-1</sup>\n          </>\n        ),\n        syntax: (\n          <>\n            sin<sup>-1</sup>(value)\n          </>\n        ),\n        parameters: [\n          {\n            name: 'value',\n            type: ParameterType.ComplexNumber,\n          },\n        ],\n        description:\n          'Also called the arcsine, calculates the angle of which the sine is equal to the input value. The outcome of the function may be either radians or degrees, depending on the current settings. Note that real number inputs outside of the range [-1, 1] are valid, but will yield complex number results.',\n        examples: [\n          {\n            description: 'Example: calculating the inverse sine of .5 (degree mode)',\n            items: [\n              {\n                type: 'input',\n                contents: (\n                  <>\n                    sin<sup>-1</sup>(.5)\n                  </>\n                ),\n              },\n              { type: 'output', contents: '30' },\n            ],\n          },\n          {\n            description: 'Example: calculating the inverse sine of .5 (radian mode).',\n            items: [\n              {\n                type: 'input',\n                contents: (\n                  <>\n                    sin<sup>-1</sup>(.5)\n                  </>\n                ),\n              },\n              { type: 'output', contents: '0.523598776' },\n              { type: 'input', contents: 'π / 6' },\n              { type: 'output', contents: '0.523598776' },\n            ],\n          },\n        ],\n        related: ['sine', 'inverse cosine', 'inverse tangent'],\n      },\n      {\n        name: 'inverse cosine',\n        symbol: (\n          <>\n            cos<sup>-1</sup>\n          </>\n        ),\n        syntax: (\n          <>\n            cos<sup>-1</sup>(value)\n          </>\n        ),\n        parameters: [\n          {\n            name: 'value',\n            type: ParameterType.ComplexNumber,\n          },\n        ],\n        description:\n          'Also called the arccosine, calculates the angle of which the cosine is equal to the input value. The outcome of the function may be either radians or degrees, depending on the current settings. Note that real number inputs outside of the range [-1, 1] are valid, but will yield complex number results.',\n        examples: [\n          {\n            description: 'Example: calculating the inverse cosine of .5 (degree mode)',\n            items: [\n              {\n                type: 'input',\n                contents: (\n                  <>\n                    cos<sup>-1</sup>(.5)\n                  </>\n                ),\n              },\n              { type: 'output', contents: '60' },\n            ],\n          },\n          {\n            description: 'Example: calculating the inverse cosine of .5 (radian mode).',\n            items: [\n              {\n                type: 'input',\n                contents: (\n                  <>\n                    cos<sup>-1</sup>(.5)\n                  </>\n                ),\n              },\n              { type: 'output', contents: '1.047197551' },\n              { type: 'input', contents: 'π / 3' },\n              { type: 'output', contents: '1.047197551' },\n            ],\n          },\n        ],\n        related: ['cosine', 'inverse sine', 'inverse tangent'],\n      },\n      {\n        name: 'inverse tangent',\n        symbol: (\n          <>\n            tan<sup>-1</sup>\n          </>\n        ),\n        syntax: (\n          <>\n            tan<sup>-1</sup>(value)\n          </>\n        ),\n        parameters: [\n          {\n            name: 'value',\n            type: ParameterType.ComplexNumber,\n          },\n        ],\n        description:\n          'Also called the arctangent, calculates the angle of which the tangent is equal to the input value. The outcome of the function may be either radians or degrees, depending on the current settings.',\n        examples: [\n          {\n            description: 'Example: calculating the inverse tangent of 1 (degree mode)',\n            items: [\n              {\n                type: 'input',\n                contents: (\n                  <>\n                    tan<sup>-1</sup>(1)\n                  </>\n                ),\n              },\n              { type: 'output', contents: '45' },\n            ],\n          },\n          {\n            description: 'Example: calculating the inverse tangent of .5 (radian mode).',\n            items: [\n              {\n                type: 'input',\n                contents: (\n                  <>\n                    tan<sup>-1</sup>(1)\n                  </>\n                ),\n              },\n              { type: 'output', contents: '0.785398163' },\n              { type: 'input', contents: 'π / 4' },\n              { type: 'output', contents: '0.785398163' },\n            ],\n          },\n        ],\n        related: ['tangent', 'inverse sine', 'inverse cosine'],\n      },\n    ],\n  },\n\n  {\n    name: 'List functions',\n    functions: [\n      {\n        name: 'sort ascending',\n        syntax: 'sort↑(L)',\n        parameters: [\n          {\n            name: 'L',\n            type: ParameterType.List,\n            description: 'containing only real values',\n          },\n        ],\n        description: 'Sorts a list in ascending order.',\n        examples: [\n          {\n            description: 'Example: sort a list',\n            items: [\n              { type: 'input', contents: 'sort↑({7, 1, 3, 9, 2})' },\n              { type: 'output', contents: '{1, 2, 3, 7, 9}' },\n            ],\n          },\n        ],\n        related: ['sort descending'],\n      },\n      {\n        name: 'sort descending',\n        syntax: 'sort↓(L)',\n        parameters: [\n          {\n            name: 'L',\n            type: ParameterType.List,\n            description: 'containing only real values',\n          },\n        ],\n        description: 'Sorts a list in descending order.',\n        examples: [\n          {\n            description: 'Example: sort a list',\n            items: [\n              { type: 'input', contents: 'sort↓({7, 1, 3, 9, 2})' },\n              { type: 'output', contents: '{9, 7, 3, 2, 1}' },\n            ],\n          },\n        ],\n        related: ['sort ascending'],\n      },\n      {\n        name: 'maximum',\n        syntax: 'max(L)',\n        parameters: [\n          {\n            name: 'L',\n            type: [ParameterType.List, ParameterType.Matrix],\n            description: 'non-empty, containing only real values',\n          },\n        ],\n        description: 'Gives the maximum value in a list or matrix.',\n        examples: [\n          {\n            description: 'Example: get maximum value in a list',\n            items: [\n              { type: 'input', contents: 'max({7, 1, 3, 9, 2})' },\n              { type: 'output', contents: '9' },\n            ],\n          },\n        ],\n        related: ['minimum'],\n      },\n      {\n        name: 'minimum',\n        syntax: 'min(L)',\n        parameters: [\n          {\n            name: 'L',\n            type: [ParameterType.List, ParameterType.Matrix],\n            description: 'non-empty, containing only real values',\n          },\n        ],\n        description: 'Gives the minimum value in a list or matrix.',\n        examples: [\n          {\n            description: 'Example: get minimum value in a list',\n            items: [\n              { type: 'input', contents: 'max({7, 1, 3, 9, 2})' },\n              { type: 'output', contents: '1' },\n            ],\n          },\n        ],\n        related: ['maximum'],\n      },\n      {\n        name: 'range',\n        syntax: ['range(max)', 'range(min, max)', 'range(min, max, step)'],\n        parameters: [\n          {\n            name: 'min',\n            type: ParameterType.RealNumber,\n            description: 'the minimum value in the list (real number)',\n          },\n          {\n            name: 'max',\n            type: ParameterType.RealNumber,\n            description: 'the maximum value in the list (real number)',\n          },\n          {\n            name: 'step',\n            type: ParameterType.RealNumber,\n            description: 'non-zero, the difference between elements in the list (real number)',\n          },\n        ],\n        description: (\n          <>\n            Generates a list containing values from <code>min</code> to <code>max</code>, differing by <code>step</code>\n            .\n          </>\n        ),\n        examples: [\n          {\n            description: 'Example: generate a list with values 1, 2, ..., 10',\n            items: [\n              { type: 'input', contents: 'range(10)' },\n              { type: 'output', contents: '{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}' },\n            ],\n          },\n          {\n            description: 'Example: generate a list with values 5, 6, ..., 12',\n            items: [\n              { type: 'input', contents: 'range(5, 12)' },\n              { type: 'output', contents: '{5, 6, 7, 8, 9, 10, 11, 12}' },\n            ],\n          },\n          {\n            description: 'Example: generate a list with values 1.9, 1.7, ..., 0.5',\n            items: [\n              { type: 'input', contents: 'range(1.9, .5, -.2)' },\n              { type: 'output', contents: '{1.9, 1.7, 1.5, 1.3, 1.1, 0.9, 0.7, 0.5}' },\n            ],\n          },\n          {\n            description: 'Example: calculate the factorial of 9 by using the product operator',\n            items: [\n              { type: 'input', contents: 'π(range(9))' },\n              { type: 'output', contents: '362880' },\n              { type: 'input', contents: '9!' },\n              { type: 'output', contents: '362880' },\n            ],\n          },\n        ],\n      },\n      {\n        name: 'length',\n        syntax: 'length(L)',\n        parameters: [\n          {\n            name: 'L',\n            type: ParameterType.List,\n          },\n        ],\n        description: 'Gives the length of a list.',\n        examples: [\n          {\n            description: 'Example: get length of a list',\n            items: [\n              { type: 'input', contents: 'length({7, 1, 3, 9, 2})' },\n              { type: 'output', contents: '5' },\n            ],\n          },\n        ],\n      },\n      {\n        name: 'standard deviation of population',\n        symbol: (\n          <>\n            σ<sub>pop</sub>\n          </>\n        ),\n        syntax: (\n          <>\n            σ<sub>pop</sub>(L)\n          </>\n        ),\n        parameters: [\n          {\n            name: 'L',\n            type: [ParameterType.List, ParameterType.Matrix],\n            description: 'containing a minimum of 2 items',\n          },\n        ],\n        description: 'Calculates the standard deviation of a list or matrix, interpreting it as a population.',\n        examples: [\n          {\n            description: 'Example: get standard deviation of a population',\n            items: [\n              {\n                type: 'input',\n                contents: (\n                  <>\n                    σ<sub>pop</sub>({'{7, 1, 3, 9, 2}'})\n                  </>\n                ),\n              },\n              { type: 'output', contents: '3.072458299' },\n            ],\n          },\n        ],\n        related: ['standard deviation of sample'],\n      },\n      {\n        name: 'standard deviation of sample',\n        symbol: (\n          <>\n            σ<sub>sample</sub>\n          </>\n        ),\n        syntax: (\n          <>\n            σ<sub>sample</sub>(L)\n          </>\n        ),\n        parameters: [\n          {\n            name: 'L',\n            type: [ParameterType.List, ParameterType.Matrix],\n            description: 'containing a minimum of 2 items',\n          },\n        ],\n        description:\n          'Calculates the standard deviation of a list or matrix, interpreting it as a sample from a population.',\n        examples: [\n          {\n            description: 'Example: get standard deviation of a sample',\n            items: [\n              {\n                type: 'input',\n                contents: (\n                  <>\n                    σ<sub>sample</sub>({'{7, 1, 3, 9, 2}'})\n                  </>\n                ),\n              },\n              { type: 'output', contents: '3.435112807' },\n            ],\n          },\n        ],\n        related: ['standard deviation of population'],\n      },\n      {\n        name: 'mean',\n        symbol: 'μ',\n        syntax: 'μ(L)',\n        parameters: [\n          {\n            name: 'L',\n            type: [ParameterType.List, ParameterType.Matrix],\n            description: 'non-empty',\n          },\n        ],\n        description: 'Calculates the mean of all elements in a list or matrix.',\n        examples: [\n          {\n            description: 'Example: get mean of items in a list',\n            items: [\n              { type: 'input', contents: 'μ({7, 1, 3, 9, 2})' },\n              { type: 'output', contents: '4.4' },\n            ],\n          },\n        ],\n        related: ['mean squared', 'median', 'mode'],\n      },\n      {\n        name: 'mean squared',\n        symbol: <>μ²</>,\n        syntax: <>μ²(L)</>,\n        parameters: [\n          {\n            name: 'L',\n            type: [ParameterType.List, ParameterType.Matrix],\n            description: 'non-empty',\n          },\n        ],\n        description: 'Calculates the mean of all squares of elements in a list or matrix.',\n        examples: [\n          {\n            description: 'Example: get mean squared of items in a list',\n            items: [\n              { type: 'input', contents: 'μ²({7, 1, 3, 9, 2})' },\n              { type: 'output', contents: '28.8' },\n            ],\n          },\n        ],\n        related: ['mean', 'median', 'mode'],\n      },\n      {\n        name: 'median',\n        symbol: (\n          <>\n            μ<sub>1/2</sub>\n          </>\n        ),\n        syntax: (\n          <>\n            μ<sub>1/2</sub>(L)\n          </>\n        ),\n        parameters: [\n          {\n            name: 'L',\n            type: [ParameterType.List, ParameterType.Matrix],\n            description: 'non-empty, containing only real values',\n          },\n        ],\n        description: 'Gives the median of all elements in a list or matrix.',\n        examples: [\n          {\n            description: 'Example: get median of items in a list',\n            items: [\n              {\n                type: 'input',\n                contents: (\n                  <>\n                    μ<sub>1/2</sub>({'{7, 1, 3, 9, 2}'})\n                  </>\n                ),\n              },\n              { type: 'output', contents: '3' },\n            ],\n          },\n        ],\n        related: ['mean', 'mean squared', 'mode'],\n      },\n      {\n        name: 'mode',\n        syntax: 'mode(L)',\n        parameters: [\n          {\n            name: 'L',\n            type: [ParameterType.List, ParameterType.Matrix],\n            description: 'non-empty',\n          },\n        ],\n        description: 'Gives the mode of a list or matrix.',\n        examples: [\n          {\n            description: 'Example: get mode of a list',\n            items: [\n              { type: 'input', contents: 'mode({7, 1, 3, 9, 2, 1})' },\n              { type: 'output', contents: '1' },\n            ],\n          },\n        ],\n        related: ['mean', 'mean squared', 'median'],\n      },\n      {\n        name: 'sum',\n        symbol: 'σ',\n        syntax: 'σ(L)',\n        parameters: [\n          {\n            name: 'L',\n            type: [ParameterType.List, ParameterType.Matrix],\n          },\n        ],\n        description: 'Calculates the sum of all elements in a list or matrix.',\n        examples: [\n          {\n            description: 'Example: get sum of all elements in a list',\n            items: [\n              { type: 'input', contents: 'σ({7, 1, 3, 9, 2})' },\n              { type: 'output', contents: '22' },\n              { type: 'input', contents: '7 + 1 + 3 + 9 + 2' },\n              { type: 'output', contents: '22' },\n            ],\n          },\n        ],\n        related: ['product'],\n      },\n      {\n        name: 'product',\n        symbol: 'π',\n        syntax: 'π(L)',\n        parameters: [\n          {\n            name: 'L',\n            type: [ParameterType.List, ParameterType.Matrix],\n          },\n        ],\n        description: 'Calculates the product of all elements in a list or matrix.',\n        examples: [\n          {\n            description: 'Example: get product of all elements in a list',\n            items: [\n              { type: 'input', contents: 'π({7, 1, 3, 9, 2})' },\n              { type: 'output', contents: '378' },\n              { type: 'input', contents: '7 × 1 × 3 × 9 × 2' },\n              { type: 'output', contents: '378' },\n            ],\n          },\n          {\n            description: 'Example: calculate the factorial of 9 by using the product operator',\n            items: [\n              { type: 'input', contents: 'π(range(9))' },\n              { type: 'output', contents: '362880' },\n              { type: 'input', contents: '9!' },\n              { type: 'output', contents: '362880' },\n            ],\n          },\n        ],\n        related: ['sum'],\n      },\n      {\n        name: 'element of',\n        symbol: '∈',\n        syntax: 'value ∈ L',\n        parameters: [\n          {\n            name: 'value',\n            type: ParameterType.ComplexNumber,\n          },\n          {\n            name: 'L',\n            type: ParameterType.List,\n          },\n        ],\n        description: 'Tests whether a value is in a list.',\n        examples: [\n          {\n            description: 'Example: test whether value is in list',\n            items: [\n              { type: 'input', contents: '9 ∈ {7, 1, 3, 9, 2}' },\n              { type: 'output', contents: 'True' },\n              { type: 'input', contents: '6 ∈ {7, 1, 3, 9, 2}' },\n              { type: 'output', contents: 'False' },\n            ],\n          },\n        ],\n        related: ['not element of'],\n      },\n      {\n        name: 'not element of',\n        symbol: '∉',\n        syntax: 'c ∉ L',\n        parameters: [\n          {\n            name: 'value',\n            type: ParameterType.ComplexNumber,\n          },\n          {\n            name: 'L',\n            type: ParameterType.List,\n          },\n        ],\n        description: 'Tests whether a value not is in a list.',\n        examples: [\n          {\n            description: 'Example: test whether value is not in list',\n            items: [\n              { type: 'input', contents: '9 ∉ {7, 1, 3, 9, 2}' },\n              { type: 'output', contents: 'False' },\n              { type: 'input', contents: '6 ∉ {7, 1, 3, 9, 2}' },\n              { type: 'output', contents: 'True' },\n            ],\n          },\n        ],\n        related: ['element of'],\n      },\n      {\n        name: 'union',\n        symbol: '∪',\n        syntax: 'L₁ ∪ L₂',\n        parameters: [\n          {\n            name: 'L₁',\n            type: ParameterType.List,\n          },\n          {\n            name: 'L₂',\n            type: ParameterType.List,\n          },\n        ],\n        description: (\n          <>\n            Returns a new list containing all elements that are either in <code>L₁</code> or in <code>L₂</code>.\n            Duplicate elements are removed.\n          </>\n        ),\n        examples: [\n          {\n            description: 'Example: find union of two lists',\n            items: [\n              { type: 'input', contents: '{7, 1, 3, 9, 2} ∪ {2, 6, 4, 1, 5}' },\n              { type: 'output', contents: '{7, 1, 3, 9, 2, 6, 4, 5}' },\n            ],\n          },\n        ],\n        related: ['intersection', 'difference', 'symmetrical difference'],\n      },\n      {\n        name: 'intersection',\n        symbol: '∩',\n        syntax: 'L₁ ∩ L₂',\n        parameters: [\n          {\n            name: 'L₁',\n            type: ParameterType.List,\n          },\n          {\n            name: 'L₂',\n            type: ParameterType.List,\n          },\n        ],\n        description: (\n          <>\n            Returns a new list containing all elements that are both in <code>L₁</code> and in <code>L₂</code>.\n            Duplicate elements are removed.\n          </>\n        ),\n        examples: [\n          {\n            description: 'Example: find intersection of two lists',\n            items: [\n              { type: 'input', contents: '{7, 1, 3, 9, 2} ∪ {2, 6, 4, 1, 5}' },\n              { type: 'output', contents: '{1, 2}' },\n            ],\n          },\n        ],\n        related: ['union', 'difference', 'symmetrical difference'],\n      },\n      {\n        name: 'difference',\n        symbol: '\\\\',\n        syntax: 'L₁ \\\\ L₂',\n        parameters: [\n          {\n            name: 'L₁',\n            type: ParameterType.List,\n          },\n          {\n            name: 'L₂',\n            type: ParameterType.List,\n          },\n        ],\n        description: (\n          <>\n            Returns a new list containing all elements that are in <code>L₁</code> but not in <code>L₂</code>. Duplicate\n            elements are removed.\n          </>\n        ),\n        examples: [\n          {\n            description: 'Example: find difference of two lists',\n            items: [\n              { type: 'input', contents: '{7, 1, 3, 9, 2} \\\\ {2, 6, 4, 1, 5}' },\n              { type: 'output', contents: '{7, 3, 9}' },\n            ],\n          },\n        ],\n        related: ['union', 'intersection', 'symmetrical difference'],\n      },\n      {\n        name: 'symmetrical difference',\n        symbol: 'Δ',\n        syntax: 'L₁ Δ L₂',\n        parameters: [\n          {\n            name: 'L₁',\n            type: ParameterType.List,\n          },\n          {\n            name: 'L₂',\n            type: ParameterType.List,\n          },\n        ],\n        description: (\n          <>\n            Returns a new list containing all elements that are either in <code>L₁</code> or in <code>L₂</code>, but not\n            both. Duplicate elements are removed.\n          </>\n        ),\n        examples: [\n          {\n            description: 'Example: find difference of two lists',\n            items: [\n              { type: 'input', contents: '{7, 1, 3, 9, 2} Δ {2, 6, 4, 1, 5}' },\n              { type: 'output', contents: '{7, 3, 9, 6, 4, 5}' },\n            ],\n          },\n        ],\n        related: ['union', 'intersection', 'difference'],\n      },\n      {\n        name: 'subset',\n        symbol: '⊂',\n        syntax: 'L₁ ⊂ L₂',\n        parameters: [\n          {\n            name: 'L₁',\n            type: ParameterType.List,\n          },\n          {\n            name: 'L₂',\n            type: ParameterType.List,\n          },\n        ],\n        description: (\n          <>\n            Tests whether <code>L₁</code> is a subset of <code>L₂</code>.\n          </>\n        ),\n        examples: [\n          {\n            description: 'Example: test subset',\n            items: [\n              { type: 'input', contents: '{1, 9} ⊂ {7, 1, 3, 9, 2}' },\n              { type: 'output', contents: 'True' },\n              { type: 'input', contents: '{1, 4} ⊂ {7, 1, 3, 9, 2}' },\n              { type: 'output', contents: 'False' },\n            ],\n          },\n        ],\n        related: ['subset or equal', 'superset', 'superset or equal'],\n      },\n      {\n        name: 'subset or equal',\n        symbol: '⊆',\n        syntax: 'L₁ ⊆ L₂',\n        parameters: [\n          {\n            name: 'L₁',\n            type: ParameterType.List,\n          },\n          {\n            name: 'L₂',\n            type: ParameterType.List,\n          },\n        ],\n        description: (\n          <>\n            Tests whether <code>L₁</code> is a subset of, or equal to, <code>L₂</code>.\n          </>\n        ),\n        examples: [\n          {\n            description: 'Example: test subset or equal',\n            items: [\n              { type: 'input', contents: '{1, 2, 3, 7, 9} ⊆ {7, 1, 3, 9, 2}' },\n              { type: 'output', contents: 'True' },\n              { type: 'input', contents: '{1, 2, 3, 6, 9} ⊆ {7, 1, 3, 9, 2}' },\n              { type: 'output', contents: 'False' },\n            ],\n          },\n        ],\n        related: ['subset', 'superset', 'superset or equal'],\n      },\n      {\n        name: 'superset',\n        symbol: '⊃',\n        syntax: 'L₁ ⊃ L₂',\n        parameters: [\n          {\n            name: 'L₁',\n            type: ParameterType.List,\n          },\n          {\n            name: 'L₂',\n            type: ParameterType.List,\n          },\n        ],\n        description: (\n          <>\n            Tests whether <code>L₁</code> is a superset of <code>L₂</code>.\n          </>\n        ),\n        examples: [\n          {\n            description: 'Example: test superset',\n            items: [\n              { type: 'input', contents: '{1, 2, 3, 7, 9, 10} ⊃ {7, 1, 3, 9, 2}' },\n              { type: 'output', contents: 'True' },\n              { type: 'input', contents: '{1, 2, 3, 7} ⊃ {7, 1, 3, 9, 2}' },\n              { type: 'output', contents: 'False' },\n            ],\n          },\n        ],\n        related: ['subset', 'subset or equal', 'superset or equal'],\n      },\n      {\n        name: 'superset or equal',\n        symbol: '⊇',\n        syntax: 'L₁ ⊇ L₂',\n        parameters: [\n          {\n            name: 'L₁',\n            type: ParameterType.List,\n          },\n          {\n            name: 'L₂',\n            type: ParameterType.List,\n          },\n        ],\n        description: (\n          <>\n            Tests whether <code>L₁</code> is a superset of, or equal to, <code>L₂</code>.\n          </>\n        ),\n        examples: [\n          {\n            description: 'Example: test superset or equal',\n            items: [\n              { type: 'input', contents: '{1, 2, 3, 7, 9} ⊇ {7, 1, 3, 9, 2}' },\n              { type: 'output', contents: 'True' },\n              { type: 'input', contents: '{1, 2, 3, 6, 9} ⊇ {7, 1, 3, 9, 2}' },\n              { type: 'output', contents: 'False' },\n            ],\n          },\n        ],\n        related: ['subset', 'subset or equal', 'superset'],\n      },\n    ],\n  },\n\n  {\n    name: 'Matrix functions',\n    functions: [\n      {\n        name: 'transpose',\n        symbol: (\n          <>\n            M<sup>T</sup>\n          </>\n        ),\n        syntax: (\n          <>\n            M<sup>T</sup>\n          </>\n        ),\n        parameters: [\n          {\n            name: 'M',\n            type: ParameterType.Matrix,\n          },\n        ],\n        description: 'Flips the matrix along the diagonal.',\n        examples: [\n          {\n            description: 'Example: transpose matrix',\n            items: [\n              {\n                type: 'input',\n                contents: (\n                  <>\n                    <div className={styles['matrix']}>\n                      <div className={styles['matrix-inner']}>\n                        <div className={styles['matrix-row']}>\n                          <div className={styles['matrix-cell']}>1</div>\n                          <div className={styles['matrix-cell']}>2</div>\n                        </div>\n                        <div className={styles['matrix-row']}>\n                          <div className={styles['matrix-cell']}>3</div>\n                          <div className={styles['matrix-cell']}>4</div>\n                        </div>\n                      </div>\n                    </div>\n                    <sup>T</sup>\n                  </>\n                ),\n              },\n              {\n                type: 'output',\n                contents: (\n                  <>\n                    <div className={styles['matrix']}>\n                      <div className={styles['matrix-inner']}>\n                        <div className={styles['matrix-row']}>\n                          <div className={styles['matrix-cell']}>1</div>\n                          <div className={styles['matrix-cell']}>3</div>\n                        </div>\n                        <div className={styles['matrix-row']}>\n                          <div className={styles['matrix-cell']}>2</div>\n                          <div className={styles['matrix-cell']}>4</div>\n                        </div>\n                      </div>\n                    </div>\n                  </>\n                ),\n              },\n            ],\n          },\n        ],\n      },\n      {\n        name: 'identity matrix',\n        symbol: (\n          <>\n            I<sub>n</sub>\n          </>\n        ),\n        syntax: (\n          <>\n            I<sub>n</sub>(n)\n          </>\n        ),\n        parameters: [\n          {\n            name: 'n',\n            type: ParameterType.NaturalNumber,\n            description: 'size',\n          },\n        ],\n        description: (\n          <>\n            Generates an identity matrix of size <code>n</code>×<code>n</code>.\n          </>\n        ),\n        examples: [\n          {\n            description: (\n              <>\n                Example: create I<sub>4</sub>\n              </>\n            ),\n            items: [\n              {\n                type: 'input',\n                contents: (\n                  <>\n                    I<sub>n</sub>(4)\n                  </>\n                ),\n              },\n              {\n                type: 'output',\n                contents: (\n                  <>\n                    <div className={styles['matrix']}>\n                      <div className={styles['matrix-inner']}>\n                        <div className={styles['matrix-row']}>\n                          <div className={styles['matrix-cell']}>1</div>\n                          <div className={styles['matrix-cell']}>0</div>\n                          <div className={styles['matrix-cell']}>0</div>\n                          <div className={styles['matrix-cell']}>0</div>\n                        </div>\n                        <div className={styles['matrix-row']}>\n                          <div className={styles['matrix-cell']}>0</div>\n                          <div className={styles['matrix-cell']}>1</div>\n                          <div className={styles['matrix-cell']}>0</div>\n                          <div className={styles['matrix-cell']}>0</div>\n                        </div>\n                        <div className={styles['matrix-row']}>\n                          <div className={styles['matrix-cell']}>0</div>\n                          <div className={styles['matrix-cell']}>0</div>\n                          <div className={styles['matrix-cell']}>1</div>\n                          <div className={styles['matrix-cell']}>0</div>\n                        </div>\n                        <div className={styles['matrix-row']}>\n                          <div className={styles['matrix-cell']}>0</div>\n                          <div className={styles['matrix-cell']}>0</div>\n                          <div className={styles['matrix-cell']}>0</div>\n                          <div className={styles['matrix-cell']}>1</div>\n                        </div>\n                      </div>\n                    </div>\n                  </>\n                ),\n              },\n            ],\n          },\n        ],\n      },\n      {\n        name: 'determinant',\n        symbol: 'det',\n        syntax: 'det(M)',\n        parameters: [\n          {\n            name: 'M',\n            type: ParameterType.SquareMatrix,\n          },\n        ],\n        description: 'Calculates the determinant of a matrix.',\n        examples: [\n          {\n            description: 'Example: get matrix determinant',\n            items: [\n              {\n                type: 'input',\n                contents: (\n                  <>\n                    det(\n                    <div className={styles['matrix']}>\n                      <div className={styles['matrix-inner']}>\n                        <div className={styles['matrix-row']}>\n                          <div className={styles['matrix-cell']}>4</div>\n                          <div className={styles['matrix-cell']}>6</div>\n                        </div>\n                        <div className={styles['matrix-row']}>\n                          <div className={styles['matrix-cell']}>-3</div>\n                          <div className={styles['matrix-cell']}>8</div>\n                        </div>\n                      </div>\n                    </div>\n                    )\n                  </>\n                ),\n              },\n              { type: 'output', contents: '50' },\n            ],\n          },\n        ],\n      },\n      {\n        name: 'row',\n        syntax: 'row(M, row)',\n        parameters: [\n          {\n            name: 'M',\n            type: ParameterType.Matrix,\n          },\n          {\n            name: 'row',\n            type: ParameterType.NaturalNumber,\n            description: 'row number',\n          },\n        ],\n        description: (\n          <>\n            Returns the element in the matrix in <code>row</code> as a row vector.\n          </>\n        ),\n        examples: [\n          {\n            description: 'Example: get matrix row',\n            items: [\n              {\n                type: 'input',\n                contents: (\n                  <>\n                    row(\n                    <div className={styles['matrix']}>\n                      <div className={styles['matrix-inner']}>\n                        <div className={styles['matrix-row']}>\n                          <div className={styles['matrix-cell']}>1</div>\n                          <div className={styles['matrix-cell']}>2</div>\n                        </div>\n                        <div className={styles['matrix-row']}>\n                          <div className={styles['matrix-cell']}>3</div>\n                          <div className={styles['matrix-cell']}>4</div>\n                        </div>\n                      </div>\n                    </div>\n                    , 1)\n                  </>\n                ),\n              },\n              {\n                type: 'output',\n                contents: (\n                  <>\n                    <div className={styles['matrix']}>\n                      <div className={styles['matrix-inner']}>\n                        <div className={styles['matrix-row']}>\n                          <div className={styles['matrix-cell']}>1</div>\n                          <div className={styles['matrix-cell']}>2</div>\n                        </div>\n                      </div>\n                    </div>\n                  </>\n                ),\n              },\n            ],\n          },\n        ],\n        related: ['cell', 'column'],\n      },\n      {\n        name: 'column',\n        syntax: 'col(M, n)',\n        parameters: [\n          {\n            name: 'M',\n            type: ParameterType.Matrix,\n          },\n          {\n            name: 'row',\n            type: ParameterType.NaturalNumber,\n            description: 'column number',\n          },\n        ],\n        description: (\n          <>\n            Returns the element in the matrix in <code>column</code> as a column vector.\n          </>\n        ),\n        examples: [\n          {\n            description: 'Example: get matrix row',\n            items: [\n              {\n                type: 'input',\n                contents: (\n                  <>\n                    col(\n                    <div className={styles['matrix']}>\n                      <div className={styles['matrix-inner']}>\n                        <div className={styles['matrix-row']}>\n                          <div className={styles['matrix-cell']}>1</div>\n                          <div className={styles['matrix-cell']}>2</div>\n                        </div>\n                        <div className={styles['matrix-row']}>\n                          <div className={styles['matrix-cell']}>3</div>\n                          <div className={styles['matrix-cell']}>4</div>\n                        </div>\n                      </div>\n                    </div>\n                    , 2)\n                  </>\n                ),\n              },\n              {\n                type: 'output',\n                contents: (\n                  <>\n                    <div className={styles['matrix']}>\n                      <div className={styles['matrix-inner']}>\n                        <div className={styles['matrix-row']}>\n                          <div className={styles['matrix-cell']}>2</div>\n                        </div>\n                        <div className={styles['matrix-row']}>\n                          <div className={styles['matrix-cell']}>4</div>\n                        </div>\n                      </div>\n                    </div>\n                  </>\n                ),\n              },\n            ],\n          },\n        ],\n        related: ['cell', 'row'],\n      },\n      {\n        name: 'cell',\n        syntax: 'cell(M, row, column)',\n        parameters: [\n          {\n            name: 'M',\n            type: ParameterType.Matrix,\n          },\n          {\n            name: 'row',\n            type: ParameterType.NaturalNumber,\n            description: 'row number',\n          },\n          {\n            name: 'column',\n            type: ParameterType.NaturalNumber,\n            description: 'column number',\n          },\n        ],\n        description: (\n          <>\n            Returns the element in the matrix at location <code>row</code>, <code>column</code>.\n          </>\n        ),\n        examples: [\n          {\n            description: 'Example: get matrix cell value',\n            items: [\n              {\n                type: 'input',\n                contents: (\n                  <>\n                    cell(\n                    <div className={styles['matrix']}>\n                      <div className={styles['matrix-inner']}>\n                        <div className={styles['matrix-row']}>\n                          <div className={styles['matrix-cell']}>1</div>\n                          <div className={styles['matrix-cell']}>2</div>\n                        </div>\n                        <div className={styles['matrix-row']}>\n                          <div className={styles['matrix-cell']}>3</div>\n                          <div className={styles['matrix-cell']}>4</div>\n                        </div>\n                      </div>\n                    </div>\n                    , 1, 2)\n                  </>\n                ),\n              },\n              { type: 'output', contents: '2' },\n            ],\n          },\n        ],\n        related: ['row', 'column'],\n      },\n    ],\n  },\n\n  {\n    name: 'Statistical functions',\n    functions: [\n      {\n        name: 'binomial probability density function',\n        syntax: ['binom-pdf(trials, p, value)'],\n        parameters: [\n          {\n            name: 'trials',\n            type: ParameterType.NaturalNumber,\n            description: 'number of trials',\n          },\n          {\n            name: 'p',\n            type: ParameterType.PValue,\n            description: 'chance of success',\n          },\n          {\n            name: 'value',\n            type: ParameterType.NaturalNumber,\n            description: 'number of successes',\n          },\n        ],\n        description: (\n          <>\n            When a certain amount of experiments (<code>trials</code>) are performed, and the chance of success in each\n            of these experiments is <code>p</code>, the binomial probability density function calculates the chance that\n            exactly <code>value</code> successes are achieved.\n          </>\n        ),\n        examples: [\n          {\n            description: 'Example: get the probability of getting heads 5 times, when flipping a coin 10 times',\n            items: [\n              { type: 'input', contents: 'binom-pdf(10, .5, 5)' },\n              { type: 'output', contents: '0.24609375' },\n            ],\n          },\n          {\n            description: 'Example: get the probability of rolling a 6 once, when rolling a die 5 times',\n            items: [\n              { type: 'input', contents: 'binom-pdf(5, 1 / 6, 1)' },\n              { type: 'output', contents: '0.401877572' },\n            ],\n          },\n        ],\n        related: [\n          'binomial cumulative distribution function',\n          'geometric probability density function',\n          'geometric cumulative distribution function',\n        ],\n      },\n      {\n        name: 'binomial cumulative distribution function',\n        syntax: ['binom-cdf(trials, p, value)'],\n        parameters: [\n          {\n            name: 'trials',\n            type: ParameterType.NaturalNumber,\n            description: 'number of trials',\n          },\n          {\n            name: 'p',\n            type: ParameterType.PValue,\n            description: 'chance of success',\n          },\n          {\n            name: 'value',\n            type: ParameterType.NaturalNumber,\n            description: 'minimum number of successes',\n          },\n        ],\n        description: (\n          <>\n            When a certain amount of experiments (<code>trials</code>) are performed, and the chance of success in each\n            of these experiments is <code>p</code>, the binomial cumulative distribution function calculates the chance\n            that at most <code>value</code> successes are achieved.\n          </>\n        ),\n        examples: [\n          {\n            description: 'Example: get the probability of getting heads 5 times or less, when flipping a coin 10 times',\n            items: [\n              { type: 'input', contents: 'binom-cdf(10, .5, 5)' },\n              { type: 'output', contents: '0.623046875' },\n            ],\n          },\n          {\n            description: 'Example: get the probability of rolling a 6 at most once, when rolling a die 5 times',\n            items: [\n              { type: 'input', contents: 'binom-cdf(5, 1 / 6, 1)' },\n              { type: 'output', contents: '0.803755144' },\n            ],\n          },\n        ],\n        related: [\n          'binomial probability density function',\n          'geometric probability density function',\n          'geometric cumulative distribution function',\n        ],\n      },\n      {\n        name: 'normal probability density function',\n        syntax: ['normal-pdf(value)', 'normal-pdf(value, μ)', 'normal-pdf(value, μ, σ)'],\n        parameters: [\n          {\n            name: 'value',\n            type: ParameterType.RealNumber,\n            description: 'value to test',\n          },\n          {\n            name: 'μ',\n            type: ParameterType.RealNumber,\n            description: 'distribution mean',\n          },\n          {\n            name: 'σ',\n            type: ParameterType.RealNumber,\n            description: 'standard deviation of distribution',\n          },\n        ],\n        description: (\n          <>\n            Since the normal distribution is continuous, normal-pdf is useful mostly to draw the normal distribution\n            curve. The <code>μ</code> and <code>σ</code> variables are optional, and will default to 0 and 1,\n            respectively.\n          </>\n        ),\n        related: ['normal cumulative distribution function'],\n      },\n      {\n        name: 'normal cumulative distribution function',\n        syntax: ['normal-pdf(lower, upper)', 'normal-pdf(lower, upper, μ)', 'normal-pdf(lower, upper, μ, σ)'],\n        parameters: [\n          {\n            name: 'lower',\n            type: ParameterType.RealNumber,\n            description: 'lower bound to test',\n          },\n          {\n            name: 'upper',\n            type: ParameterType.RealNumber,\n            description: 'upper bound to test',\n          },\n          {\n            name: 'μ',\n            type: ParameterType.RealNumber,\n            description: 'distribution mean',\n          },\n          {\n            name: 'σ',\n            type: ParameterType.RealNumber,\n            description: 'standard deviation of distribution',\n          },\n        ],\n        description: (\n          <>\n            When a variable is normally distributed, the normal cumulative distribution function will help find the\n            probability that the variable falls between <code>lower</code> and <code>upper</code>. The <code>μ</code>{' '}\n            and <code>σ</code> variables are optional, and will default to 0 and 1, respectively.\n            <br />\n            <br />\n            Often times, one wants to find the chance that the variable is higher or lower than a certain threshold. A\n            way to do this is depicted in the second and third example below.\n          </>\n        ),\n        examples: [\n          {\n            description:\n              'Example: get the probability that a variable following the standard normal distribution is between -1 and 1.',\n            items: [\n              { type: 'input', contents: 'normal-cdf(-1, 1)' },\n              { type: 'output', contents: '0.682689492' },\n            ],\n          },\n          {\n            description:\n              'Example: get the probability that a person is larger than 180cm given that the length in a certain region follows a normal distribution with μ 171cm and σ 9cm.',\n            items: [\n              { type: 'input', contents: 'normal-cdf(180, 10E99, 171, 9)' },\n              { type: 'output', contents: '0.158655254' },\n            ],\n          },\n          {\n            description:\n              'Example: get the probability that a person is smaller than 175cm given that the length in a certain region follows a normal distribution with μ 171cm and σ 9cm.',\n            items: [\n              { type: 'input', contents: 'normal-cdf(-10E99, 175, 171, 9)' },\n              { type: 'output', contents: '0.671639357' },\n            ],\n          },\n        ],\n        related: ['normal probability density function'],\n      },\n      {\n        name: 't probability density function',\n        syntax: 't-pdf(df, value)',\n        parameters: [\n          {\n            name: 'df',\n            type: ParameterType.NaturalNumber,\n            description: 'degrees of freedom',\n          },\n          {\n            name: 'value',\n            type: ParameterType.RealNumber,\n            description: 'value to test',\n          },\n        ],\n        description: 'Since the t distribution is continuous, t-pdf is useful mostly to draw the t distribution curve.',\n        related: ['t cumulative distribution function'],\n      },\n      {\n        name: 't cumulative distribution function',\n        syntax: 't-pdf(df, lower, upper)',\n        parameters: [\n          {\n            name: 'df',\n            type: ParameterType.NaturalNumber,\n            description: 'degrees of freedom',\n          },\n          {\n            name: 'lower',\n            type: ParameterType.RealNumber,\n            description: 'lower bound to test',\n          },\n          {\n            name: 'upper',\n            type: ParameterType.RealNumber,\n            description: 'upper bound to test',\n          },\n        ],\n        description: (\n          <>\n            When a variable is t distributed, the t cumulative distribution function will help find the probability that\n            the variable falls between <code>lower</code> and <code>upper</code>.\n            <br />\n            <br />\n            Often times, one wants to find the chance that the variable is higher or lower than a certain threshold. A\n            way to do this is depicted in the second and third example below.\n          </>\n        ),\n        examples: [\n          {\n            description:\n              'Example: get the probability that a variable following the t distribution with 20 degrees of freedom is between -1 and 1.',\n            items: [\n              { type: 'input', contents: 't-cdf(20, -1, 1)' },\n              { type: 'output', contents: '0.670743423' },\n            ],\n          },\n          {\n            description:\n              'Example: get the probability that a person is larger than 180cm given that the length in a group of 30 people follows a t distribution with μ 171cm and σ 9cm.',\n            items: [\n              { type: 'input', contents: 't-cdf(29, (180 - 171) / 9, 10E99)' },\n              { type: 'output', contents: '0.162790994' },\n            ],\n          },\n          {\n            description:\n              'Example: get the probability that a person is smaller than 175cm given that the length in a group of 30 people follows a t distribution with μ 171cm and σ 9cm.',\n            items: [\n              { type: 'input', contents: 't-cdf(29, -10E99, (175 - 171) / 9)' },\n              { type: 'output', contents: '0.669989747' },\n            ],\n          },\n        ],\n        related: ['t probability density function'],\n      },\n      {\n        name: 'χ² probability density function',\n        syntax: <>χ²-pdf(df, value)</>,\n        parameters: [\n          {\n            name: 'df',\n            type: ParameterType.NaturalNumber,\n            description: 'degrees of freedom',\n          },\n          {\n            name: 'value',\n            type: ParameterType.RealNumber,\n            description: 'value to test',\n          },\n        ],\n        description:\n          'Since the χ²-distribution is continuous, χ²-pdf is useful mostly to draw the χ ² distribution curve.',\n        related: ['χ² cumulative distribution function'],\n      },\n      {\n        name: 'χ² cumulative distribution function',\n        syntax: <>χ²-cdf(df, lower, upper)</>,\n        parameters: [\n          {\n            name: 'df',\n            type: ParameterType.NaturalNumber,\n            description: 'degrees of freedom',\n          },\n          {\n            name: 'lower',\n            type: ParameterType.RealNumber,\n            description: 'lower bound to test',\n          },\n          {\n            name: 'upper',\n            type: ParameterType.RealNumber,\n            description: 'upper bound to test',\n          },\n        ],\n        description: (\n          <>\n            When a variable is χ² distributed, the χ² cumulative distribution function will help find the probability\n            that the variable falls between <code>lower</code> and <code>upper</code>.\n          </>\n        ),\n        examples: [\n          {\n            description:\n              'Example: a population of 100 penguins is expected to have a 1:1 male-female ratio. In reality, 42 males and 58 females are found. What is the chance that these numbers are the result of mere coincidence?',\n            items: [\n              { type: 'input', contents: '(42 - 50)² / 50 + (58 - 50)² / 50 → x' },\n              { type: 'output', contents: '2.56' },\n              { type: 'input', contents: 'χ²-cdf(1, x, 10E99)' },\n              { type: 'output', contents: '0.109598583' },\n            ],\n          },\n        ],\n        related: ['χ² probability density function'],\n      },\n      {\n        name: 'F probability density function',\n        syntax: 'F-pdf(df₁, df₂, value)',\n        parameters: [\n          {\n            name: 'df₁',\n            type: ParameterType.NaturalNumber,\n            description: 'degrees of freedom numerator',\n          },\n          {\n            name: 'df₂',\n            type: ParameterType.NaturalNumber,\n            description: 'degrees of freedom denominator',\n          },\n          {\n            name: 'value',\n            type: ParameterType.RealNumber,\n            description: 'value to test',\n          },\n        ],\n        description: 'Since the F distribution is continuous, F-pdf is useful mostly to draw the F distribution curve.',\n        related: ['F cumulative distribution function'],\n      },\n      {\n        name: 'F cumulative distribution function',\n        syntax: 'F-cdf(df₁, df₂, lower, upper)',\n        parameters: [\n          { name: 'df₁', type: ParameterType.NaturalNumber, description: 'degrees of freedom numerator' },\n          { name: 'df₂', type: ParameterType.NaturalNumber, description: 'degrees of freedom denominator' },\n          { name: 'lower', type: ParameterType.RealNumber, description: 'lower bound to test' },\n          { name: 'upper', type: ParameterType.RealNumber, description: 'upper bound to test' },\n        ],\n        description: (\n          <>\n            When a variable is F distributed, the F cumulative distribution function will help find the probability that\n            the variable falls between <code>lower</code> and <code>upper</code>.\n          </>\n        ),\n        examples: [\n          {\n            description:\n              'Example: three types of fertilizer are tested on crops six times each. The yields of the harvest are stored in lists x, y and z. What is the chance that the difference in yields between the types of fertilizer is the result of mere coincidence?',\n            items: [\n              { type: 'input', contents: '{6, 8, 4, 5, 3, 4} → x' },\n              { type: 'output', contents: '{6, 8, 4, 5, 3, 4}' },\n              { type: 'input', contents: '{8, 12, 9, 11, 6, 8} → y' },\n              { type: 'output', contents: '{8, 12, 9, 11, 6, 8}' },\n              { type: 'input', contents: '{13, 9, 11, 8, 7, 12} → z' },\n              { type: 'output', contents: '{13, 9, 11, 8, 7, 12}' },\n              { type: 'input', contents: 'length(x) → n' },\n              { type: 'output', contents: '6' },\n              { type: 'input', contents: '3 → a' },\n              { type: 'output', contents: '3' },\n              { type: 'input', contents: '{μ(x), μ(y), μ(z)} → m' },\n              { type: 'output', contents: '{5, 9, 10}' },\n              { type: 'input', contents: 'σ(n(m - μ(m))²) / (a - 1) → s' },\n              { type: 'output', contents: '42' },\n              { type: 'input', contents: 'σ((x - μ(x))²) + σ((y - μ(y))²) + σ((z - μ(z))²) / (a(n - 1))' },\n              { type: 'output', contents: '68' },\n              { type: 'input', contents: 'Ans / (a(n - 1)) → b' },\n              { type: 'output', contents: '4.533333333' },\n              { type: 'input', contents: 's / b → f' },\n              { type: 'output', contents: '9.264705882' },\n              { type: 'input', contents: 'F-cdf(a - 1, a(n - 1), f, 10E99)' },\n              { type: 'output', contents: '2.398777329E-3' },\n            ],\n          },\n        ],\n        related: ['F probability density function'],\n      },\n      {\n        name: 'poisson probability density function',\n        syntax: 'poisson-pdf(mean, value)',\n        parameters: [\n          { name: 'mean', type: ParameterType.NaturalNumber, description: 'distribution mean' },\n          { name: 'value', type: ParameterType.NaturalNumber, description: 'value to test' },\n        ],\n        description: (\n          <>\n            When in a poisson process a certain event happens on average <code>mean</code> times in a certain time span,\n            poisson-pdf calculates the probability that, for a particular equal time span, this event occurs{' '}\n            <code>value</code> times.\n          </>\n        ),\n        examples: [\n          {\n            description:\n              'Example: get the probability that a person, who receives on average 4 pieces of mail a day, receives precisely 2 pieces on mail on a specific day.',\n            items: [\n              { type: 'input', contents: 'poisson-pdf(4, 2)' },\n              { type: 'output', contents: '0.146525111' },\n            ],\n          },\n        ],\n        related: ['poisson cumulative distribution function'],\n      },\n      {\n        name: 'poisson cumulative distribution function',\n        syntax: 'poisson-cdf(mean, value)',\n        parameters: [\n          { name: 'mean', type: ParameterType.NaturalNumber, description: 'distribution mean' },\n          { name: 'value', type: ParameterType.NaturalNumber, description: 'maximum value to test' },\n        ],\n        description: (\n          <>\n            When in a poisson process a certain event happens on average <code>mean</code> times in a certain time span,\n            poisson-pdf calculates the probability that, for a particular equal time span, this event occurs a maximum\n            of <code>value</code> times.\n          </>\n        ),\n        examples: [\n          {\n            description:\n              'Example: get the probability that a person, who receives on average 4 pieces of mail a day, receives a maximum 2 pieces on mail on a specific day.',\n            items: [\n              { type: 'input', contents: 'poisson-cdf(4, 2)' },\n              { type: 'output', contents: '0.238103306' },\n            ],\n          },\n        ],\n        related: ['poisson probability density function'],\n      },\n      {\n        name: 'geometric probability density function',\n        syntax: 'geometric-pdf(P, trials)',\n        parameters: [\n          { name: 'P', type: ParameterType.PValue, description: 'chance of success' },\n          { name: 'trials', type: ParameterType.NaturalNumber, description: 'number of trials' },\n        ],\n        description: (\n          <>\n            Given that a certain event succeeds with probability <code>P</code>, and the event will keep happening until\n            a success occurs, geometric probability density function will return the probability that the event succeeds\n            after exactly some number of <code>trials</code>.\n          </>\n        ),\n        examples: [\n          {\n            description:\n              'Example: you throw a die until you roll a 6. What is the chance that this takes you precisely three throws?',\n            items: [\n              { type: 'input', contents: 'geometric-pdf(1 / 6, 3)' },\n              { type: 'output', contents: '0.115740741' },\n            ],\n          },\n        ],\n        related: [\n          'geometric cumulative distribution function',\n          'binomial probability density function',\n          'binomial cumulative distribution function',\n        ],\n      },\n      {\n        name: 'geometric cumulative distribution function',\n        syntax: 'geometric-cdf(P, trials)',\n        parameters: [\n          { name: 'P', type: ParameterType.PValue, description: 'chance of success' },\n          { name: 'trials', type: ParameterType.NaturalNumber, description: 'maximum number of trials' },\n        ],\n        description: (\n          <>\n            Given that a certain event succeeds with probability <code>P</code>, and the event will keep happening until\n            a success occurs, geometric probability density function will return the probability that the event succeeds\n            after at most some number of <code>trials</code>.\n          </>\n        ),\n        examples: [\n          {\n            description:\n              'Example: you throw a die until you roll a 6. What is the chance that this takes you at most three throws?',\n            items: [\n              { type: 'input', contents: 'geometric-cdf(1 / 6, 3)' },\n              { type: 'output', contents: '0.421296296' },\n            ],\n          },\n        ],\n        related: [\n          'geometric probability density function',\n          'binomial probability density function',\n          'binomial cumulative distribution function',\n        ],\n      },\n      {\n        name: 'combinations',\n        symbol: 'nCr',\n        syntax: 'a nCr b',\n        parameters: [\n          { name: 'a', type: ParameterType.NaturalNumber, description: 'total' },\n          { name: 'b', type: ParameterType.NaturalNumber, description: 'sample' },\n        ],\n        description:\n          'The nCr operation calculates the number of possible combinations of sample units can be taken from a population of total items. The difference between combinations and permutations is that for combinations, the order in which items are picked is irrelevant.',\n        examples: [\n          {\n            description:\n              'Example: what is the number of possible combinations of books I can take on vacation if I randomly pick 3 out of my collection of 50 books?',\n            items: [\n              { type: 'input', contents: '50 nCr 3' },\n              { type: 'output', contents: '19600' },\n            ],\n          },\n        ],\n        related: ['permutations', 'factorial'],\n      },\n      {\n        name: 'permutations',\n        symbol: 'nPr',\n        syntax: 'a nPr b',\n        parameters: [\n          { name: 'a', type: ParameterType.NaturalNumber, description: 'total' },\n          { name: 'b', type: ParameterType.NaturalNumber, description: 'sample' },\n        ],\n        description:\n          'The nPr operation calculates the number of possible permutations of sample units can be taken from a population of total items. The difference between combinations and permutations is that for permutations, the order in which items are picked is significant.',\n        examples: [\n          {\n            description:\n              'Example: in an 8-person race, how many possible combinations of gold-silver-bronze medallists are there?',\n            items: [\n              { type: 'input', contents: '8 nPr 3' },\n              { type: 'output', contents: '336' },\n            ],\n          },\n        ],\n        related: ['combinations', 'factorial'],\n      },\n      {\n        name: 'inverse-normal',\n        syntax: ['inverse-normal(P)', 'inverse-normal(P, μ)', 'inverse-normal(P, μ, σ)'],\n        parameters: [\n          { name: 'P', type: ParameterType.PValue, description: 'p-value to test' },\n          { name: 'μ', type: ParameterType.RealNumber, description: 'distribution mean' },\n          { name: 'σ', type: ParameterType.RealNumber, description: 'standard deviation of distribution' },\n        ],\n        description: (\n          <>\n            When a variable is normally distributed, the inverse-normal function will, given a probability{' '}\n            <code>P</code>, help find the value with this tail-probability. The <code>μ</code> and <code>σ</code>{' '}\n            variables are optional, and will default to 0 and 1, respectively.\n          </>\n        ),\n        examples: [\n          {\n            description:\n              'Example: Example: get the minimum length of the 5% tallest people, given that the length in a certain region follows a normal distribution with μ 171cm and σ 9cm.',\n            items: [\n              { type: 'input', contents: 'inverse-normal(.95, 171, 9)' },\n              { type: 'output', contents: '185.8036826' },\n            ],\n          },\n        ],\n      },\n      {\n        name: 'inverse-t',\n        syntax: 'inverse-t(df, P)',\n        parameters: [\n          { name: 'df', type: ParameterType.NaturalNumber, description: 'degrees of freedom' },\n          { name: 'P', type: ParameterType.PValue, description: 'p-value to test' },\n        ],\n        description: (\n          <>\n            When a variable is normally distributed, the inverse-normal function will, given a probability{' '}\n            <code>P</code>, help find the value with this tail-probability.\n          </>\n        ),\n        examples: [\n          {\n            description:\n              'Example: Example: get the minimum length of the 5% tallest people, given that the length in a group of 30 people follows a t distribution with μ 171cm and σ 9cm.',\n            items: [\n              { type: 'input', contents: 'inverse-t(29, .95) × 9 + 171' },\n              { type: 'output', contents: '186.2921432' },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n\n  {\n    name: 'Miscellaneous functions',\n    functions: [\n      {\n        name: 'factorial',\n        symbol: '!',\n        syntax: 'a!',\n        parameters: [\n          {\n            name: 'a',\n            type: ParameterType.NaturalNumber,\n          },\n        ],\n        description: (\n          <>\n            Calculates the factorial for <code>a</code>, which is equal to 0 × 1 × 2 × ... × (<code>a</code> - 1) ×{' '}\n            <code>a</code>.\n          </>\n        ),\n        examples: [\n          {\n            description: 'Example: calculate the factorial of 8',\n            items: [\n              { type: 'input', contents: '8!' },\n              { type: 'output', contents: '40320' },\n              { type: 'input', contents: '1 × 2 × 3 × 4 × 5 × 6 × 7 × 8' },\n              { type: 'output', contents: '40320' },\n            ],\n          },\n        ],\n        related: ['combinations', 'permutations', 'gamma'],\n      },\n      {\n        name: 'gamma',\n        symbol: 'Γ',\n        syntax: 'Γ(value)',\n        parameters: [\n          {\n            name: 'value',\n            type: ParameterType.ComplexNumber,\n            description: 'non-zero and not a negative integer',\n          },\n        ],\n        description:\n          'The gamma function is a generalization of the factorial function for real and complex numbers. It is shifted left on the x axis by one, so that 1! equals Γ(2).',\n        examples: [\n          {\n            description: 'Example: calculate the gamma function for a complex value',\n            items: [\n              { type: 'input', contents: 'Γ(-1 + 2i)' },\n              { type: 'output', contents: '-0.03236129 + 0.011229484i' },\n            ],\n          },\n        ],\n        related: ['factorial'],\n      },\n      {\n        name: 'absolute',\n        symbol: '|c|',\n        syntax: 'abs(value)',\n        parameters: [\n          {\n            name: 'value',\n            type: ParameterType.ComplexNumber,\n          },\n        ],\n        description: 'Returns the absolute value of a number.',\n        examples: [\n          {\n            description: 'Example: calculate the absolute value of a real number',\n            items: [\n              { type: 'input', contents: 'abs(-2,5)' },\n              { type: 'output', contents: '2.5' },\n            ],\n          },\n          {\n            description: 'Example: calculate the absolute value of a complex number',\n            items: [\n              { type: 'input', contents: 'abs(-3 + 4i)' },\n              { type: 'output', contents: '5' },\n            ],\n          },\n        ],\n      },\n      {\n        name: 'round down',\n        symbol: '⌊c⌋',\n        syntax: 'floor(value)',\n        parameters: [\n          {\n            name: 'value',\n            type: ParameterType.ComplexNumber,\n          },\n        ],\n        description: 'Rounds the value down. Both the real and imaginary part of the value are rounded.',\n        examples: [\n          {\n            description: 'Example: rounding down a positive value',\n            items: [\n              { type: 'input', contents: 'floor(1.8)' },\n              { type: 'output', contents: '1' },\n            ],\n          },\n          {\n            description: 'Example: rounding down a negative value',\n            items: [\n              { type: 'input', contents: 'floor(-1.8)' },\n              { type: 'output', contents: '-2' },\n            ],\n          },\n        ],\n        related: ['round', 'round up'],\n      },\n      {\n        name: 'round',\n        symbol: '⌊c⌉',\n        syntax: 'round(value)',\n        parameters: [\n          {\n            name: 'value',\n            type: ParameterType.ComplexNumber,\n          },\n        ],\n        description:\n          \"Rounds the value, with 'round half up' as a tie-breaking rule. Both the real and imaginary part of the value are rounded.\",\n        examples: [\n          {\n            description: 'Example: rounding a positive value',\n            items: [\n              { type: 'input', contents: 'round(1.5)' },\n              { type: 'output', contents: '2' },\n            ],\n          },\n          {\n            description: 'Example: rounding a negative value',\n            items: [\n              { type: 'input', contents: 'round(-1.5)' },\n              { type: 'output', contents: '-1' },\n            ],\n          },\n        ],\n        related: ['round down', 'round up'],\n      },\n      {\n        name: 'round up',\n        symbol: '⌈z⌉',\n        syntax: 'ceil(value)',\n        parameters: [\n          {\n            name: 'value',\n            type: ParameterType.ComplexNumber,\n          },\n        ],\n        description: 'Rounds the value up. Both the real and imaginary part of the value are rounded.',\n        examples: [\n          {\n            description: 'Example: rounding up a positive value',\n            items: [\n              { type: 'input', contents: 'ceil(1.8)' },\n              { type: 'output', contents: '2' },\n            ],\n          },\n          {\n            description: 'Example: rounding up a negative value',\n            items: [\n              { type: 'input', contents: 'ceil(-1.8)' },\n              { type: 'output', contents: '-1' },\n            ],\n          },\n        ],\n        related: ['round down', 'round'],\n      },\n      {\n        name: 'conjugate',\n        symbol: (\n          <>\n            c<sup>*</sup>\n          </>\n        ),\n        syntax: 'conj(value)',\n        parameters: [\n          {\n            name: 'value',\n            type: ParameterType.ComplexNumber,\n          },\n        ],\n        description: 'The conjugate negates the imaginary part of a complex number.',\n        examples: [\n          {\n            description: 'Example: get the conjugate of a complex number',\n            items: [\n              { type: 'input', contents: 'conj(2 + 3i)' },\n              { type: 'input', contents: '2 - 3i' },\n            ],\n          },\n        ],\n      },\n      {\n        name: 'real part',\n        symbol: 'ℜ',\n        syntax: 'ℜ(value)',\n        parameters: [\n          {\n            name: 'value',\n            type: ParameterType.ComplexNumber,\n          },\n        ],\n        description: 'Returns only the real part of a complex number.',\n        examples: [\n          {\n            description: 'Example: get the real part of a complex number',\n            items: [\n              { type: 'input', contents: 'ℜ(2 + 3i)' },\n              { type: 'output', contents: '2' },\n            ],\n          },\n        ],\n        related: ['imaginary part'],\n      },\n      {\n        name: 'imaginary part',\n        symbol: 'ℑ',\n        syntax: 'ℑ(value)',\n        parameters: [\n          {\n            name: 'value',\n            type: ParameterType.ComplexNumber,\n          },\n        ],\n        description: 'Returns only the imaginary part of a complex number.',\n        examples: [\n          {\n            description: 'Example: get the imaginary part of a complex number',\n            items: [\n              { type: 'input', contents: 'ℑ(2 + 3i)' },\n              { type: 'output', contents: '3i' },\n            ],\n          },\n        ],\n        related: ['real part'],\n      },\n      {\n        name: 'integer part',\n        syntax: 'int(value)',\n        parameters: [\n          {\n            name: 'value',\n            type: ParameterType.ComplexNumber,\n          },\n        ],\n        description: 'Returns only the integer part of a number.',\n        examples: [\n          {\n            description: 'Example: get the integer part of a complex number',\n            items: [\n              { type: 'input', contents: 'int(5.6 - 6.3i)' },\n              { type: 'output', contents: '5 - 6i' },\n            ],\n          },\n        ],\n        related: ['fraction part'],\n      },\n      {\n        name: 'fraction part',\n        syntax: 'frac(value)',\n        parameters: [\n          {\n            name: 'value',\n            type: ParameterType.ComplexNumber,\n          },\n        ],\n        description: 'Returns only the fraction part of a number.',\n        examples: [\n          {\n            description: 'Example: get the fraction part of a complex number',\n            items: [\n              { type: 'input', contents: 'int(5.6 - 6.3i)' },\n              { type: 'output', contents: '0.6 - 0.3i' },\n            ],\n          },\n        ],\n        related: ['integer part'],\n      },\n      {\n        name: 'greatest common denominator',\n        syntax: 'gcd(a, b)',\n        parameters: [\n          { name: 'a', type: ParameterType.Integer },\n          { name: 'b', type: ParameterType.Integer },\n        ],\n        description: 'Finds the greatest common denominator for two integers. Result is a positive integer.',\n        examples: [\n          {\n            description: 'Example: get the greatest common denominator for two integers',\n            items: [\n              { type: 'input', contents: 'gcd(98, 182)' },\n              { type: 'output', contents: '14' },\n            ],\n          },\n        ],\n        related: ['least common multiple'],\n      },\n      {\n        name: 'least common multiple',\n        syntax: 'lcm(a, a)',\n        parameters: [\n          { name: 'a', type: ParameterType.Integer },\n          { name: 'b', type: ParameterType.Integer },\n        ],\n        description: 'Finds the least common multiple of two integers. Result is a positive integer.',\n        examples: [\n          {\n            description: 'Example: get the least common multiple for two integers',\n            items: [\n              { type: 'input', contents: 'gcd(9, 15)' },\n              { type: 'output', contents: '45' },\n            ],\n          },\n        ],\n        related: ['greatest common denominator'],\n      },\n      {\n        name: 'random',\n        syntax: ['rand()', 'rand(min, max)'],\n        description: (\n          <>\n            Returns a random number between <code>min</code>, inclusive and <code>max</code>, exclusive.{' '}\n            <code>Min</code> and <code>max</code> default to 0 and 1, respectively.\n          </>\n        ),\n        parameters: [\n          { name: 'min', type: ParameterType.RealNumber },\n          { name: 'max', type: ParameterType.RealNumber },\n        ],\n      },\n      {\n        name: 'store',\n        symbol: '→',\n        syntax: 'value → variable',\n        parameters: [\n          { name: 'value', type: ParameterType.Any },\n          { name: 'variable', type: ParameterType.Variable },\n        ],\n        description: 'Stores a value in a variable.',\n        examples: [\n          {\n            description: 'Example: store the number 58 in variable a',\n            items: [\n              {\n                type: 'input',\n                contents: (\n                  <>\n                    58 → <strong>a</strong>\n                  </>\n                ),\n              },\n              { type: 'output', contents: '58' },\n              {\n                type: 'input',\n                contents: (\n                  <>\n                    <strong>a</strong>\n                  </>\n                ),\n              },\n              { type: 'output', contents: '58' },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n];\n","import { Tooltip } from '@material-ui/core';\nimport { ParameterType } from './functions';\nimport styles from './FunctionReference.module.css';\n\ninterface ParameterTypeComponentProps {\n  type: ParameterType;\n}\n\nexport function ParameterTypeComponent({ type }: ParameterTypeComponentProps) {\n  if (type === ParameterType.Any) {\n    return (\n      <Tooltip title=\"This parameter may be of any type\">\n        <span className={styles['parameter-type']}>Any</span>\n      </Tooltip>\n    );\n  } else if (type === ParameterType.ComplexNumber) {\n    return (\n      <Tooltip\n        title={\n          <>\n            This parameter must be a complex number or one of its subcategories such as a real number.\n            <br />\n            <br />\n            Examples:\n            <ul>\n              <li>12</li>\n              <li>12.34</li>\n              <li>\n                <em>i</em>\n              </li>\n              <li>\n                5 + 3<em>i</em>\n              </li>\n            </ul>\n          </>\n        }\n      >\n        <span className={styles['parameter-type']}>Complex number</span>\n      </Tooltip>\n    );\n  } else if (type === ParameterType.Integer) {\n    return (\n      <Tooltip\n        title={\n          <>\n            This parameter must be an integer.\n            <br />\n            <br />\n            Examples:\n            <ul>\n              <li>-12</li>\n              <li>0</li>\n              <li>12000</li>\n            </ul>\n          </>\n        }\n      >\n        <span className={styles['parameter-type']}>Integer</span>\n      </Tooltip>\n    );\n  } else if (type === ParameterType.List) {\n    return (\n      <Tooltip title=\"This parameter must be a list\">\n        <span className={styles['parameter-type']}>List</span>\n      </Tooltip>\n    );\n  } else if (type === ParameterType.Matrix) {\n    return (\n      <Tooltip title=\"This parameter must be a matrix\">\n        <span className={styles['parameter-type']}>Matrix</span>\n      </Tooltip>\n    );\n  } else if (type === ParameterType.NaturalNumber) {\n    return (\n      <Tooltip title=\"This parameter must be a natural number\">\n        <span className={styles['parameter-type']}>Natural number</span>\n      </Tooltip>\n    );\n  } else if (type === ParameterType.PValue) {\n    return (\n      <Tooltip title=\"This parameter must be a p-value (real number in the range 0-1)\">\n        <span className={styles['parameter-type']}>P-value</span>\n      </Tooltip>\n    );\n  } else if (type === ParameterType.RealNumber) {\n    return (\n      <Tooltip\n        title={\n          <>\n            This parameter must be a real number\n            <ul>\n              <li>-12</li>\n              <li>12.34</li>\n              <li>\n                <em>π</em>\n              </li>\n            </ul>\n          </>\n        }\n      >\n        <span className={styles['parameter-type']}>Real number</span>\n      </Tooltip>\n    );\n  } else if (type === ParameterType.SquareMatrix) {\n    return (\n      <Tooltip title=\"This parameter must be a square-shaped matrix\">\n        <span className={styles['parameter-type']}>Square matrix</span>\n      </Tooltip>\n    );\n  } else if (type === ParameterType.Variable) {\n    return (\n      <Tooltip title=\"This parameter must be a variable\">\n        <span className={styles['parameter-type']}>Variable</span>\n      </Tooltip>\n    );\n  }\n\n  return null;\n}\n","import { FunctionExampleItem } from './functions';\nimport styles from '../MathsApp.module.css';\n\nexport function FunctionExampleItemComponent({ type, contents }: FunctionExampleItem) {\n  return <span className={styles[type]}>{contents}</span>;\n}\n","import { FunctionExampleItemComponent } from './FunctionExampleItem';\nimport { FunctionExample } from './functions';\nimport styles from '../MathsApp.module.css';\n\nexport function FunctionExampleComponent({ description, items }: FunctionExample) {\n  return (\n    <div className={styles['example']}>\n      <div className={styles['description']}>{description}</div>\n      <div className={styles['screen']}>\n        {items.map((item, i) => (\n          <FunctionExampleItemComponent key={i} {...item} />\n        ))}\n      </div>\n    </div>\n  );\n}\n","import { Link, Typography } from '@material-ui/core';\nimport { getFunctionIdentifier } from './functions';\n\ninterface FunctionRelatedProps {\n  related: string[];\n}\n\nexport function FunctionRelated({ related }: FunctionRelatedProps) {\n  return (\n    <>\n      <Typography variant=\"h4\">Related:</Typography>\n      <ul>\n        {related.map((relatedItem, i) => (\n          <li key={i}>\n            <Link href={`#${getFunctionIdentifier(relatedItem)}`}>{relatedItem}</Link>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n}\n","import { Accordion, AccordionSummary, AccordionDetails, Typography } from '@material-ui/core';\nimport { Function, getFunctionIdentifier } from './functions';\nimport styles from './FunctionReference.module.css';\nimport { ParameterTypeComponent } from './ParameterType';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { FunctionExampleComponent } from './FunctionExample';\nimport { FunctionRelated } from './FunctionRelated';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useLocation } from 'react-router';\n\nexport function FunctionComponent({ name, symbol, syntax, parameters, description, examples, related }: Function) {\n  const syntaxArray: React.ReactNode[] = Array.isArray(syntax) ? syntax : [syntax];\n\n  const { hash } = useLocation();\n\n  const id = useMemo(() => getFunctionIdentifier(name), [name]);\n\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const toggleExpand = useCallback(() => setIsExpanded((wasExpanded) => !wasExpanded), []);\n\n  useEffect(() => {\n    if (hash.replace(/^#/, '') === id) {\n      setIsExpanded(true);\n    }\n  }, [id, hash]);\n\n  return (\n    <>\n      <Accordion\n        className={styles['accordion']}\n        TransitionProps={{ unmountOnExit: true }}\n        expanded={isExpanded}\n        onClick={toggleExpand}\n      >\n        <AccordionSummary expandIcon={<ExpandMoreIcon />} id={id}>\n          <span className={styles['function-name']}>{name}</span>\n          {symbol ? <code className={styles['function-symbol']}> {symbol}</code> : ''}\n        </AccordionSummary>\n        <AccordionDetails className={styles['function-details']}>\n          <Typography variant=\"h4\">Syntax</Typography>\n          <ul className={styles['syntax-list']} style={{ listStyleType: syntaxArray.length > 1 ? 'disc' : 'none' }}>\n            {syntaxArray.map((syntaxExample, i) => (\n              <li key={i}>\n                <code>{syntaxExample}</code>\n              </li>\n            ))}\n          </ul>\n          <Typography variant=\"body1\" className={styles['syntax-where']}>\n            where:\n          </Typography>\n          <ul className={styles['syntax-list']} style={{ listStyleType: parameters.length > 1 ? 'disc' : 'none' }}>\n            {parameters.map((parameter, i) => {\n              const types = Array.isArray(parameter.type) ? parameter.type : [parameter.type];\n\n              return (\n                <li key={i}>\n                  <code className={styles['parameter']}>{parameter.name}</code>{' '}\n                  {parameter.description ? `(${parameter.description}) ` : ''}\n                  is of type{' '}\n                  {types.map((type, j) => (\n                    <span key={j}>\n                      {j > 0 ? ' or ' : ''}\n                      <ParameterTypeComponent type={type} />\n                    </span>\n                  ))}{' '}\n                </li>\n              );\n            })}\n          </ul>\n\n          <Typography variant=\"h4\">Description</Typography>\n          <div>{description}</div>\n          {examples?.map((example, i) => (\n            <FunctionExampleComponent key={i} {...example} />\n          ))}\n\n          {related && <FunctionRelated related={related} />}\n        </AccordionDetails>\n      </Accordion>\n    </>\n  );\n}\n","import { Typography } from '@material-ui/core';\nimport { FunctionComponent } from './Function';\nimport { FunctionCategory } from './functions';\n\nexport function FunctionCategoryComponent({ name, functions }: FunctionCategory) {\n  return (\n    <>\n      <Typography variant=\"h2\">{name}</Typography>\n      {functions.map((func, i) => (\n        <FunctionComponent key={i} {...func} />\n      ))}\n    </>\n  );\n}\n","import { Typography } from '@material-ui/core';\nimport { FunctionCategoryComponent } from './FunctionCategory';\nimport { FUNCTION_CATEGORIES } from './functions';\n\nexport function FunctionReference() {\n  return (\n    <>\n      <Typography variant=\"h1\">Function reference</Typography>\n\n      {FUNCTION_CATEGORIES.map((category, i) => (\n        <FunctionCategoryComponent key={i} {...category} />\n      ))}\n    </>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/screen-overview.3ee3765d.png\";","import { Link, List, ListItem, ListSubheader, Paper, Typography } from '@material-ui/core';\nimport screenOverviewImage from '../../Images/screen-overview.png';\nimport styles from './Manual.module.css';\nimport mathsappStyles from '../MathsApp.module.css';\n\nexport function Manual() {\n  return (\n    <>\n      <Typography variant=\"h1\">Manual</Typography>\n      <Paper variant=\"outlined\" className={styles['table-of-contents']}>\n        <List disablePadding={true}>\n          <ListSubheader>Table of contents</ListSubheader>\n          <ListItem button={true}>\n            <Link href=\"#screenoverview\">Screen overview</Link>\n          </ListItem>\n          <ListItem button={true}>\n            <Link href=\"#basicoperation\">Basic operation</Link>\n          </ListItem>\n          <List disablePadding={true}>\n            <ListItem button={true} className={styles['nested-listitem']}>\n              <Link href=\"#basicinput\">Basic input</Link>\n            </ListItem>\n            <ListItem button={true} className={styles['nested-listitem']}>\n              <Link href=\"#secondaryandalphafunctions\">Secondary and alpha functions</Link>\n            </ListItem>\n            <ListItem button={true} className={styles['nested-listitem']}>\n              <Link href=\"#arithmetic\">Arithmetic</Link>\n            </ListItem>\n            <ListItem button={true} className={styles['nested-listitem']}>\n              <Link href=\"#complexnumbers\">Complex numbers</Link>\n            </ListItem>\n          </List>\n          <ListItem button={true}>\n            <Link href=\"#reusingpreviousanswers\">Reusing previous answers</Link>\n          </ListItem>\n          <List disablePadding={true}>\n            <ListItem button={true} className={styles['nested-listitem']}>\n              <Link href=\"#variables\">Variables</Link>\n            </ListItem>\n          </List>\n          <ListItem button={true}>\n            <Link href=\"#binaryoctalandhexadecimalnumbers\">Binary, octal and hexadecimal numbers</Link>\n          </ListItem>\n          <List disablePadding={true}>\n            <ListItem button={true} className={styles['nested-listitem']}>\n              <Link href=\"#input\">Input</Link>\n            </ListItem>\n            <ListItem button={true} className={styles['nested-listitem']}>\n              <Link href=\"#output\">Output</Link>\n            </ListItem>\n          </List>\n          <ListItem button={true}>\n            <Link href=\"#lists\">Lists</Link>\n          </ListItem>\n          <List disablePadding={true}>\n            <ListItem button={true} className={styles['nested-listitem']}>\n              <Link href=\"#overloading\">Overloading</Link>\n            </ListItem>\n          </List>\n          <ListItem button={true}>\n            <Link href=\"#precedencerules\">Precedence rules</Link>\n          </ListItem>\n        </List>\n      </Paper>\n      <Typography variant=\"h2\" id=\"screenoverview\">\n        Screen overview\n      </Typography>\n      <div className={styles['screen-overview-container']}>\n        <div className={styles['screen-overview-dummy']}></div>\n        <div className={styles['screen-overview']}>\n          <img src={screenOverviewImage} alt=\"screen overview\" />\n          <div className={styles['legend']} style={{ left: '6.6%', top: '5.5%', height: '24.5%' }}>\n            <Link href=\"#screenoverview_mode_dropdown\" className={styles['legend-label']}>\n              Mode dropdown\n            </Link>\n          </div>\n          <div className={styles['legend']} style={{ left: '27%', top: '7%', height: '18.5%' }}>\n            <Link href=\"#screenoverview_help\" className={styles['legend-label']}>\n              Help\n            </Link>\n          </div>\n          <div className={styles['legend']} style={{ left: '72.2%', top: '5.5%', height: '15.5%' }}>\n            <Link href=\"#screenoverview_function_dropdown\" className={styles['legend-label']}>\n              Function dropdown\n            </Link>\n          </div>\n          <div className={styles['legend']} style={{ left: '84.4%', top: '5.5%', height: '11%' }}>\n            <Link href=\"#screenoverview_output_dropdown\" className={styles['legend-label']}>\n              Output dropdown\n            </Link>\n          </div>\n          <div className={styles['legend']} style={{ left: '94.7%', top: '5.5%', height: '6.5%' }}>\n            <div className={styles['legend-label']}>\n              <Link href=\"#screenoverview_physical_constants\">Physical constants</Link>\n              <br />\n              <Link href=\"#screenoverview_variable_manager\">Variable manager</Link>\n              <br />\n              <Link href=\"#screenoverview_settings\">Settings</Link>\n            </div>\n          </div>\n\n          <div className={styles['legend']} style={{ left: '50%', top: '36%' }}>\n            <Link href=\"#screenoverview_output_area\" className={styles['legend-label']}>\n              Output area\n            </Link>\n          </div>\n\n          <div\n            className={`${styles['legend']} ${styles['legend-top']}`}\n            style={{ left: '8.2%', top: '42.25%', height: '11.5%' }}\n          >\n            <Link href=\"#screenoverview_2nd_key\" className={styles['legend-label']}>\n              2nd key\n            </Link>\n          </div>\n          <div\n            className={`${styles['legend']} ${styles['legend-top']}`}\n            style={{ left: '24.7%', top: '46.75%', height: '7%' }}\n          >\n            <Link href=\"#screenoverview_alpha_key\" className={styles['legend-label']}>\n              Alpha key\n            </Link>\n          </div>\n          <div\n            className={`${styles['legend']} ${styles['legend-top']}`}\n            style={{ left: '50%', top: '51.25%', height: '2.5%' }}\n          >\n            <Link href=\"#screenoverview_navigation_keys\" className={styles['legend-label']}>\n              Navigation keys\n            </Link>\n          </div>\n\n          <div className={`${styles['legend']} ${styles['legend-horizontal']}`} style={{ left: '59%', top: '64.5%' }}>\n            <Link href=\"#screenoverview_function_keys\" className={styles['legend-label']}>\n              Function keys\n            </Link>\n          </div>\n          <div\n            className={`${styles['legend']} ${styles['legend-horizontal']} ${styles['legend-black']}`}\n            style={{ left: '34%', top: '77%' }}\n          >\n            <Link href=\"#screenoverview_numeric_keys\" className={styles['legend-label']}>\n              Numeric keys\n            </Link>\n          </div>\n          <div\n            className={`${styles['legend']} ${styles['legend-horizontal']} ${styles['legend-black']}`}\n            style={{ left: '79.9%', top: '84.5%' }}\n          >\n            <Link href=\"#screenoverview_basic_operations\" className={styles['legend-label']}>\n              Basic operations\n            </Link>\n          </div>\n          <div\n            className={`${styles['legend']} ${styles['legend-horizontal']} ${styles['legend-black']}`}\n            style={{ left: '94%', top: '97.5%' }}\n          >\n            <div>\n              <span className={styles['legend-label']}>\n                <Link href=\"#screenoverview_enter_key\">Enter key</Link>\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n      <Typography variant=\"h3\" id=\"screenoverview_mode_dropdown\">\n        Navigation drawer\n      </Typography>\n      <Typography variant=\"body1\" paragraph={true}>\n        From the navigation drawer, another calculator mode can be selected, changing the main functionality of the\n        calculator. The following modes are available:\n      </Typography>\n      <List>\n        <li>\n          <strong>Basic</strong> – a slimmed down version of the scientific calculator\n        </li>\n        <li>\n          <strong>Scientific</strong> – the default scientific calculator\n        </li>\n        <li>\n          <strong>Graphing</strong> – allows for formulas to be entered as functions, then plot them{' '}\n          <span className={styles['paid_version']}>(paid version only)</span>\n        </li>\n        <li>\n          <strong>Programming</strong> – switches to programming mode, providing bitwise operators on integers{' '}\n          <span className={styles['paid_version']}>(paid version only)</span>\n        </li>\n      </List>\n      <Typography variant=\"h3\" id=\"screenoverview_help\">\n        Help\n      </Typography>\n      <Typography variant=\"body1\" paragraph={true}>\n        Opens the user manual, which you are currently reading.\n      </Typography>\n      <Typography variant=\"h3\" id=\"screenoverview_physical_constants\">\n        Physical constants\n      </Typography>\n      <Typography variant=\"body1\" paragraph={true}>\n        Opens the physical constants dialog screen. This screen contains a number of often-used physical constants,\n        which can be inserted into the current calculation.\n      </Typography>\n      <Typography variant=\"h3\" id=\"screenoverview_variable_manager\">\n        Variable manager\n      </Typography>\n      <Typography variant=\"body1\" paragraph={true}>\n        Opens the variable manager, which shows the current value of all variables, and allows for them to be inserted\n        into the current calculation.\n      </Typography>\n      <Typography variant=\"h3\" id=\"screenoverview_settings\">\n        Settings\n      </Typography>\n      <Typography variant=\"body1\" paragraph={true}>\n        Opens the settings screen.\n      </Typography>\n      <Typography variant=\"h3\" id=\"screenoverview_function_dropdown\">\n        Function dialog\n      </Typography>\n      <Typography variant=\"body1\" paragraph={true}>\n        The function dialog contains all extra calculator operators that are not accessible directly from the on-screen\n        keyboard. These functions are divided into six categories:\n      </Typography>\n      <ol>\n        <li>\n          <strong>Hyperbolic functions</strong>\n        </li>\n        <li>\n          <strong>\n            <Link href=\"/MathsApp/FunctionReference/#miscellaneousfunctions\">Math functions</Link>\n          </strong>{' '}\n          – miscellaneous general functions\n        </li>\n        <li>\n          <strong>\n            <Link href=\"/MathsApp/FunctionReference/#listfunctions\">List functions</Link>\n          </strong>{' '}\n          – functions that apply to lists only (e.g. <Link href=\"/MathsApp/FunctionReference/#union\">union</Link>,{' '}\n          <Link href=\"/MathsApp/FunctionReference/#mean\">mean</Link>,{' '}\n          <Link href=\"/MathsApp/FunctionReference/#sum\">sum</Link>)\n        </li>\n        <li>\n          <strong>\n            <Link href=\"/MathsApp/FunctionReference/#statisticalfunctions\">Statistical functions</Link>\n          </strong>{' '}\n          – various functions concerning statistical distributions\n        </li>\n        <li>\n          <strong>\n            <Link href=\"/MathsApp/FunctionReference/#matrixfunctions\">Matrix functions</Link>\n          </strong>{' '}\n          – functions that apply to matrices only (e.g.{' '}\n          <Link href=\"/MathsApp/FunctionReference/#transpose\">transpose</Link>,{' '}\n          <Link href=\"/MathsApp/FunctionReference/#determinant\">determinant</Link>){' '}\n          <span className={styles['paid_version']}>(paid version only)</span>\n        </li>\n        <li>\n          <strong>User defined functions</strong> – functions that are customizable{' '}\n          <span className={styles['paid_version']}>(paid version only)</span>\n        </li>\n      </ol>\n      <Typography variant=\"h3\" id=\"screenoverview_output_dropdown\">\n        Output dropdown\n      </Typography>\n      <Typography variant=\"body1\" paragraph={true}>\n        The output dropdown contains functions to save, load or erase the current output.\n      </Typography>\n      <Typography variant=\"h3\" id=\"screenoverview_output_area\">\n        Output area\n      </Typography>\n      <Typography variant=\"body1\" paragraph={true}>\n        This area will contain all previously entered input and results\n      </Typography>\n      <Typography variant=\"h3\" id=\"screenoverview_2nd_key\">\n        2nd key\n      </Typography>\n      <Typography variant=\"body1\" paragraph={true}>\n        This button switches all keys on the keyboard to their secondary function (shown in the top left of the button).\n      </Typography>\n      <Typography variant=\"h3\" id=\"screenoverview_alpha_key\">\n        Alpha key\n      </Typography>\n      <Typography variant=\"body1\" paragraph={true}>\n        This button switches all keys on the keyboard to their alpha value (shown in the top right of the button). The\n        alpha values (a-z) are the variables that one may store values in.\n      </Typography>\n      <Typography variant=\"h3\" id=\"screenoverview_navigation_keys\">\n        Navigation keys\n      </Typography>\n      <Typography variant=\"body1\" paragraph={true}>\n        These buttons may be used to move the cursor in the input.\n      </Typography>\n      <Typography variant=\"h3\" id=\"screenoverview_function_keys\">\n        Function keys\n      </Typography>\n      <Typography variant=\"body1\" paragraph={true}>\n        These buttons contain the most used functions in MathsApp.\n      </Typography>\n      <Typography variant=\"h3\" id=\"screenoverview_numeric_keys\">\n        Numeric keys\n      </Typography>\n      <Typography variant=\"body1\" paragraph={true}>\n        These buttons are used to add numeric data to the input. Besides regular decimal numbers, they also allow\n        insertion of binary, octal, and hexadecimal numbers, complex numbers, and the common constants <em>e</em> and{' '}\n        <em>π</em>.\n      </Typography>\n      <Typography variant=\"h3\" id=\"screenoverview_basic_operations\">\n        Basic operations\n      </Typography>\n      <Typography variant=\"body1\" paragraph={true}>\n        These buttons contain the most basic arithmetic operators.\n      </Typography>\n      <Typography variant=\"h3\" id=\"screenoverview_enter_key\">\n        Enter key\n      </Typography>\n      <Typography variant=\"body1\" paragraph={true}>\n        This button evaluates the input, and outputs the result.\n      </Typography>\n      <Typography variant=\"h2\" id=\"basicoperation\">\n        Basic operation\n      </Typography>\n      <Typography variant=\"h3\" id=\"basicinput\">\n        Basic input\n      </Typography>\n      <Typography variant=\"body1\" paragraph={true}>\n        Numbers in MathsApp may be entered by using the{' '}\n        <span className={`${styles['button']} ${styles['button-numeric']}`}>\n          0<span className={styles['shift']}>bin</span>\n        </span>{' '}\n        through{' '}\n        <span className={`${styles['button']} ${styles['button-numeric']}`}>\n          9<span className={styles['alpha']}>o</span>\n        </span>{' '}\n        buttons, and the decimal point{' '}\n        <span className={`${styles['button']} ${styles['button-numeric']}`}>\n          .<span className={styles['shift']}>oct</span>\n        </span>\n        . To delete the last entered number, press the{' '}\n        <span className={`${styles['button']} ${styles['button-function']}`}>\n          &larr;Del<span className={styles['alpha']}>l</span>\n        </span>{' '}\n        button. To delete all entered input, press <span className=\"button_clear\">×</span> in the input field. To\n        evaluate the input and get the result, press the enter button.\n      </Typography>\n      <Typography variant=\"h3\" id=\"secondaryandalphafunctions\">\n        Secondary and alpha functions\n      </Typography>\n      <Typography variant=\"body1\" paragraph={true}>\n        While each button on the screen has a primary functions, many also have a secondary and/or alpha function. For\n        example take the{' '}\n        <span className={`${styles['button']} ${styles['button-function']}`}>\n          x<sup>2</sup>\n          <span className={styles['shift']}>&radic;</span>\n          <span className={styles['alpha']}>j</span>\n        </span>{' '}\n        button. When user normally, it will insert the{' '}\n        <Link href=\"/MathsApp/FunctionReference/#square\">square operator</Link> into the input. However, by pressing the{' '}\n        <Link href=\"#screenoverview_2nd_key\">2nd button</Link>, the secondary function of the button,{' '}\n        <Link href=\"/MathsApp/FunctionReference/#squareroot\">square root</Link>, will come to the foreground, making the\n        button looking like{' '}\n        <span className={`${styles['button']} ${styles['button-function']}`}>\n          &radic;\n          <span className={styles['shift']}>\n            x<sup>2</sup>\n          </span>\n          <span className={styles['alpha']}>j</span>\n        </span>\n        . Now, when the button is pressed, the square root operator will be inserted into the input. Similarly, by\n        pressing the <Link href=\"#screenoverview_alpha_key\">alpha button</Link>, one is able to insert the variable j\n        into the calculation.\n      </Typography>\n      <Typography variant=\"h3\" id=\"arithmetic\">\n        Arithmetic\n      </Typography>\n      <Typography variant=\"body1\" paragraph={true}>\n        The arithmetic operators add{' '}\n        <span className={`${styles['button']} ${styles['button-basic-operation']}`}>+</span>, subtract{' '}\n        <span className={`${styles['button']} ${styles['button-basic-operation']}`}>\n          &minus;<span className={styles['shift']}>&Gamma;</span>\n          <span className={styles['alpha']}>z</span>\n        </span>\n        , multiply{' '}\n        <span className={`${styles['button']} ${styles['button-basic-operation']}`}>\n          ×<span className={styles['shift']}>!</span>\n          <span className={styles['alpha']}>u</span>\n        </span>{' '}\n        and divide{' '}\n        <span className={`${styles['button']} ${styles['button-basic-operation']}`}>\n          ÷<span className={styles['alpha']}>p</span>\n        </span>{' '}\n        can be found to the right of the numeric buttons.\n      </Typography>\n      <Typography variant=\"h3\" id=\"subtraction_vs_negation\">\n        Subtraction vs. negation\n      </Typography>\n      <Typography variant=\"body1\" paragraph={true}>\n        Negative numbers are entered using the negate operator{' '}\n        <span className={`${styles['button']} ${styles['button-basic-operation']}`}>\n          (-)<span className={styles['alpha']}>q</span>\n        </span>\n        . It is important not to confuse this with the subtract operator{' '}\n        <span className={`${styles['button']} ${styles['button-basic-operation']}`}>\n          &minus;<span className={styles['shift']}>&Gamma;</span>\n          <span className={styles['alpha']}>z</span>\n        </span>\n        . As an example, to subtract 5 from 10, one would enter{' '}\n        <span className={styles['button-sequence']}>\n          <span className={`${styles['button']} ${styles['button-numeric']}`}>\n            1<span className={styles['shift']}>i</span>\n            <span className={styles['alpha']}>w</span>\n          </span>{' '}\n          <span className={`${styles['button']} ${styles['button-numeric']}`}>\n            0<span className={styles['shift']}>bin</span>\n          </span>{' '}\n          <span className={`${styles['button']} ${styles['button-basic-operation']}`}>\n            &minus;<span className={styles['shift']}>&Gamma;</span>\n            <span className={styles['alpha']}>z</span>\n          </span>{' '}\n          <span className={`${styles['button']} ${styles['button-numeric']}`}>\n            5<span className={styles['alpha']}>s</span>\n          </span>\n        </span>\n        . On the other hand, to calculate 5 × -5, one would enter{' '}\n        <span className={styles['button-sequence']}>\n          <span className={`${styles['button']} ${styles['button-numeric']}`}>\n            5<span className={styles['alpha']}>s</span>\n          </span>{' '}\n          <span className={`${styles['button']} ${styles['button-basic-operation']}`}>×</span>{' '}\n          <span className={`${styles['button']} ${styles['button-basic-operation']}`}>\n            (-)<span className={styles['alpha']}>q</span>\n          </span>{' '}\n          <span className={`${styles['button']} ${styles['button-numeric']}`}>\n            5<span className={styles['alpha']}>s</span>\n          </span>\n        </span>\n        :\n      </Typography>\n      <div className={mathsappStyles['example']}>\n        <div className={mathsappStyles['description']}>Example: correct usage of the negate and subtract operators</div>\n        <div className={mathsappStyles['screen']}>\n          <div className={mathsappStyles['input']}>10 &minus; 5</div>\n          <div className={mathsappStyles['output']}>5</div>\n          <div className={mathsappStyles['input']}>5 × -5</div>\n          <div className={mathsappStyles['output']}>-25</div>\n        </div>\n      </div>\n      <Typography variant=\"body1\" paragraph={true}>\n        When the negate and subtract operators are used incorrectly, the output will be incorrect or invalid. For\n        example, if one would calculate 10 &minus; 5 using the negate operator, MathsApp will interpret this as 10 × -5,\n        yielding the result -50. When 5 × -5 is calculated using the subtract operator, MathsApp will tell you that it\n        is missing a value, since the subtract operator requires two operands rather than one.\n      </Typography>\n      <div className={mathsappStyles['example']}>\n        <span className={mathsappStyles['description']}>\n          Example: incorrect usage of the negate and subtract operators\n        </span>\n        <div className={mathsappStyles['screen']}>\n          <span className={mathsappStyles['input']}>10-5</span>\n          <span className={mathsappStyles['output']}>-50</span>\n          <span className={mathsappStyles['input']}>5 × &minus; 5</span>\n          <span className={`${mathsappStyles['output']} ${styles['error']}`}>Value expected</span>\n        </div>\n      </div>\n      <Typography variant=\"h3\" id=\"complexnumbers\">\n        Complex numbers\n      </Typography>\n      <Typography variant=\"body1\" paragraph={true}>\n        In order to enter complex numbers, use the same input mechanism as for regular numbers. You can find the symbol\n        i as the 2<sup>nd</sup> function of the{' '}\n        <span className={`${styles['button']} ${styles['button-numeric']}`}>\n          1<span className={styles['shift']}>i</span>\n          <span className={styles['alpha']}>w</span>\n        </span>{' '}\n        button. As inputting complex numbers regularly requires using the add operator, which has a low priority, do not\n        forget to add parentheses in the proper location.\n      </Typography>\n      <div className={mathsappStyles['example']}>\n        <span className={mathsappStyles['description']}>Example: complex number calculations</span>\n        <div className={mathsappStyles['screen']}>\n          <span className={mathsappStyles['input']}>2 + 4i / 2</span>\n          <span className={mathsappStyles['output']}>2 + 2i</span>\n          <span className={mathsappStyles['input']}>(2 + 4i) / 2</span>\n          <span className={mathsappStyles['output']}>1 + 2i</span>\n        </div>\n      </div>\n      <Typography variant=\"h2\" id=\"reusingpreviousanswers\">\n        Reusing previous answers\n      </Typography>\n      <Typography variant=\"body1\" paragraph={true}>\n        Often times, one would like to input a calculation making use of previous answers. MathsApp has several ways of\n        doing this. First, the special variable 'Ans' will always contain the last answer. Ans may be inserted by using\n        the{' '}\n        <span className={`${styles['button']} ${styles['button-basic-operation']}`}>\n          Ans<span className={styles['alpha']}>v</span>\n        </span>{' '}\n        button, or by inserting a postfix or infix operator at the start of a new calculation. For example, pressing{' '}\n        <span className={`${styles['button']} ${styles['button-basic-operation']}`}>\n          ×<span className={styles['shift']}>!</span>\n          <span className={styles['alpha']}>u</span>\n        </span>{' '}\n        when the input is empty will insert 'Ans ×'.\n      </Typography>\n      <div className={mathsappStyles['example']}>\n        <span className={mathsappStyles['description']}>Example: using the 'Ans' variable</span>\n        <div className={mathsappStyles['screen']}>\n          <span className={mathsappStyles['input']}>5 × 10</span>\n          <span className={mathsappStyles['output']}>50</span>\n          <span className={mathsappStyles['input']}>Ans / 2</span>\n          <span className={mathsappStyles['output']}>25</span>\n        </div>\n      </div>\n      <Typography variant=\"body1\" paragraph={true}>\n        Another way of inserting previous answers into the current calculation is by tapping a previous answer in the\n        output. A pop-up will appear displaying information about the anwer. From this pop-up, it is possible to insert\n        the value into the current calculation by pressing the 'Insert into calculation' button.\n      </Typography>\n      <Typography variant=\"h3\" id=\"variables\">\n        Variables\n      </Typography>\n      <Typography variant=\"body1\" paragraph={true}>\n        Finally, values may be saved in variables for later use using the{' '}\n        <Link href=\"/MathsApp/FunctionReference/#store\">store operator</Link>.\n      </Typography>\n      <div className={mathsappStyles['example']}>\n        <span className={mathsappStyles['description']}>Example: using variables</span>\n        <div className={mathsappStyles['screen']}>\n          <span className={mathsappStyles['input']}>\n            5 × 3 &rarr; <strong>a</strong>\n          </span>\n          <span className={mathsappStyles['output']}>15</span>\n          <span className={mathsappStyles['input']}>\n            2 × 7 &rarr; <strong>a</strong>\n          </span>\n          <span className={mathsappStyles['output']}>14</span>\n          <span className={mathsappStyles['input']}>\n            <strong>a</strong> + <strong>b</strong>\n          </span>\n          <span className={mathsappStyles['output']}>29</span>\n        </div>\n      </div>\n      <Typography variant=\"h2\" id=\"binaryoctalandhexadecimalnumbers\">\n        Binary, octal and hexadecimal numbers\n      </Typography>\n      <Typography variant=\"h3\" id=\"input\">\n        Input\n      </Typography>\n      <Typography variant=\"body1\" paragraph={true}>\n        To insert binary, octal or hexadecimal numbers into a calculation, the secondary function of{' '}\n        <span className={`${styles['button']} ${styles['button-numeric']}`}>\n          0<span className={styles['shift']}>bin</span>\n        </span>\n        ,{' '}\n        <span className={`${styles['button']} ${styles['button-numeric']}`}>\n          .<span className={styles['shift']}>oct</span>\n        </span>\n        , or{' '}\n        <span className={`${styles['button']} ${styles['button-numeric']}`}>\n          Exp<span className={styles['shift']}>hex</span>\n        </span>{' '}\n        should be used, respectively. When one of these functions is used, a subscript notation shows the base of the\n        number that is inputted, and the numeric keys on the keyboard will change accordingly.\n      </Typography>\n      <Typography variant=\"h3\" id=\"output\">\n        Output\n      </Typography>\n      <Typography variant=\"body1\" paragraph={true}>\n        While the output of the scientific calculator is always decimal, the output may always be viewed as a\n        binary/octal/hexadecimal number if it is a natural number. To do this, simply tap it in the output. This will\n        show a pop-up containing informatino about the output, showing it in binary, octal and hexadecimal notation.\n      </Typography>\n      <Typography variant=\"h2\" id=\"lists\">\n        Lists\n      </Typography>\n      <Typography variant=\"body1\" paragraph={true}>\n        MathsApp also contains a list type, which has the notation {'{'}1, 2, ...{'}'}. A list may contain any number of\n        complex numbers, but no other lists or matrices. To enter a list, press the{' '}\n        <span className={`${styles['button']} ${styles['button-function']}`}>\n          {'{'}L{'}'}\n        </span>{' '}\n        button. Additional values may be added to the list using the{' '}\n        <span className={`${styles['button']} ${styles['button-function']}`}>\n          ,<span className={styles['alpha']}>h</span>\n        </span>{' '}\n        button.\n      </Typography>\n      <Typography variant=\"h3\" id=\"overloading\">\n        Overloading\n      </Typography>\n      <Typography variant=\"body1\" paragraph={true}>\n        While there are many <Link href=\"/MathsApp/FunctionReference/#listfunctions\">list-specific operators</Link>,\n        many regular operators may also be used on lists, in which case they will be applied to all items in the list\n        separately. This is called operator overloading. When operators are overloaded that require more than one\n        parameter, a combination of complex numbers and lists may be used, but when multiple lists are used, they must\n        be of equal length.\n      </Typography>\n      <div className={mathsappStyles['example']}>\n        <span className={mathsappStyles['description']}>Example: operator overloading on lists</span>\n        <div className={mathsappStyles['screen']}>\n          <span className={mathsappStyles['input']}>\n            {'{'}1, 2, 3{'}'} × 2\n          </span>\n          <span className={mathsappStyles['output']}>\n            {'{'}2, 4, 6{'}'}\n          </span>\n          <span className={mathsappStyles['input']}>\n            {'{'}1, 2, 3{'}'} × {'{'}(5, 10, 15){'}'}\n          </span>\n          <span className={mathsappStyles['output']}>\n            {'{'}5, 20, 45{'}'}\n          </span>\n          <span className={mathsappStyles['input']}>\n            {'{'}1, 2, 3{'}'} × {'{'}(5, 10){'}'}\n          </span>\n          <span className={`${mathsappStyles['output']} ${styles['error']}`}>\n            Left operand of multiply operator is invalid (expected: complex number, found: list)\n          </span>\n        </div>\n      </div>\n      <Typography variant=\"h2\" id=\"precedencerules\">\n        Precedence rules\n      </Typography>\n      Expressions in MathsApp are evaluated taking into account the following precedence rules:\n      <ol>\n        <li>Parentheses and braces () {}</li>\n        <li>Functions</li>\n        <li>\n          Exponents and post operators <Link href=\"/MathsApp/FunctionReference/#power\">^</Link>,{' '}\n          <Link href=\"/MathsApp/FunctionReference/#factorial\">!</Link>,{' '}\n          <Link href=\"/MathsApp/FunctionReference/#transpose\">\n            <sup>-T</sup>\n          </Link>\n          ,{' '}\n          <Link href=\"/MathsApp/FunctionReference/#square\">\n            <sup>2</sup>\n          </Link>\n          , and{' '}\n          <Link href=\"/MathsApp/FunctionReference/#reciprocal\">\n            <sup>-1</sup>\n          </Link>\n        </li>\n        <li>\n          <Link href=\"/MathsApp/FunctionReference/#negate\">Negate operator (-)</Link>\n        </li>\n        <li>\n          <Link href=\"/MathsApp/FunctionReference/#multiply\">Multiply ×</Link> and{' '}\n          <Link href=\"/MathsApp/FunctionReference/#divide\">divide ÷</Link>\n        </li>\n        <li>\n          <Link href=\"/MathsApp/FunctionReference/#add\">Add +</Link> and{' '}\n          <Link href=\"/MathsApp/FunctionReference/#subtract\"> subtract &minus;</Link>\n        </li>\n        <li>\n          <Link href=\"/MathsApp/FunctionReference/#intersection\">&cap;</Link>,{' '}\n          <Link href=\"/MathsApp/FunctionReference/#difference\">\\</Link>, and{' '}\n          <Link href=\"/MathsApp/FunctionReference/#symmetricaldifference\">&Delta;</Link>\n        </li>\n        <li>\n          <Link href=\"/MathsApp/FunctionReference/#store\">Store operator &rarr;</Link>\n        </li>\n      </ol>\n      {/*<Typography variant=\"h2\" id=\"erlangblockingformula\">Example: Erlang Blocking formula</Typography>\n\n<Typography variant=\"body1\" paragraph={true}>This section contains an example showing you how you can use MathsApp as efficiently as possible. This example especially shows the power of operator overloading using lists.</Typography>\n\n<Typography variant=\"h3\">Question</Typography>\n\n<Typography variant=\"body1\" paragraph={true}>A cell tower in a communication network has to process two phone calls per minute on average. The call duration has a gamma distribution with an average of 1 minute. The cell tower is able to process at most four calls simultaneously. What is the probability that a phone call will be blocked because the cell tower is overloaded?</Typography>\n\n<Typography variant=\"h3\">Solution</Typography>\n\n<Typography variant=\"body1\" paragraph={true}>To answer this question, one may use the Erlang blocking formula:</Typography>\n\n<img className=\"formula\" src=\"/Content/Images/erlangb.png\" />\n\n<Typography variant=\"body1\" paragraph={true}>Where:</Typography>\n\n<ul>\n\t<li>&lambda; is the call arrival rate = 2 per minute</li>\n\t<li>&beta; is the mean call duration = 1 minute</li>\n\t<li>k is the number of possible simultaneous calls = 4</li>\n</ul>\n\n<Typography variant=\"body1\" paragraph={true}>To calculate the answer to this problem with MathsApp, we first store the values to the appropriate variables:</Typography>\n\n<div className={mathsappStyles['example']}>\n\t<span className={mathsappStyles['input']}>2 &rarr; <strong>l</strong></span>\n  <div className={mathsappStyles['screen']}>\n    <span className={mathsappStyles['output']}>2</span>\n    <span className={mathsappStyles['input']}>1 &rarr; <strong>b</strong></span>\n    <span className={mathsappStyles['output']}>1</span>\n    <span className={mathsappStyles['input']}>4 &rarr; <strong>k</strong></span>\n    <span className={mathsappStyles['output']}>4</span>\n  </div>\n</div>\n\n<Typography variant=\"body1\" paragraph={true}>Since i in this formula will take on the values {0, 1, ..., k-1, k}, we will store this list of values in i:</Typography>\n\n<div className={mathsappStyles['example']}>\n  <div className={mathsappStyles['screen']}>\n    <span className={mathsappStyles['input']}>range(0, <strong>k</strong>) &rarr; i</span>\n    <span className={mathsappStyles['output']}>{0, 1, 2, 3, 4}</span>\n  </div>\n</div>\n\n<Typography variant=\"body1\" paragraph={true}>Now we can easily calculate the answer:</Typography>\n\n<div className={mathsappStyles['example']}>\n  <div className={mathsappStyles['screen']}>\n    <span className={mathsappStyles['input']}>(<strong>lb</strong>)^<strong>k</strong> / <strong>k</strong>! / &Sigma;((<strong>lb</strong>)^<strong>i</strong> / <strong>i</strong>!)</span>\n    <span className={mathsappStyles['output']}>0.095238095</span>\n  </div>\n</div>\n\n  <Typography variant=\"body1\" paragraph={true}>So, the call blocking probability is 9.5%.</Typography>*/}\n    </>\n  );\n}\n","import { useEffect } from 'react';\n\nexport function Get() {\n  useEffect(() => {\n    window.location.href = 'https://play.google.com/store/apps/details?id=com.mathsapp';\n  }, []);\n\n  return <>Redirecting...</>;\n}\n","import { Paper, Tab, Tabs } from '@material-ui/core';\nimport { Switch, Route, useHistory, useLocation } from 'react-router';\nimport { FunctionReference } from './FunctionReference/FunctionReference';\nimport { Manual } from './Manual/Manual';\nimport styles from '../App.module.css';\nimport { Get } from './Get/Get';\n\nexport function MathsApp() {\n  const { pathname } = useLocation();\n  const history = useHistory();\n  const isFunctionReferenceSelected = /MathsApp\\/FunctionReference/.exec(pathname);\n\n  return (\n    <div className={styles['page-container']}>\n      <Paper className={styles['page']}>\n        <Tabs value={isFunctionReferenceSelected ? 1 : 0} centered={true} className={styles['tabs']}>\n          <Tab onClick={() => history.push('/MathsApp/Manual')} label=\"Manual\" />\n          <Tab onClick={() => history.push('/MathsApp/FunctionReference')} label=\"Function reference\" />\n        </Tabs>\n        <div className={styles['page-content']}>\n          <Switch>\n            <Route path=\"/MathsApp/FunctionReference\">\n              <FunctionReference />\n            </Route>\n            <Route path=\"/MathsApp/Get\">\n              <Get />\n            </Route>\n            <Route path=\"/MathsApp\">\n              <Manual />\n            </Route>\n          </Switch>\n        </div>\n      </Paper>\n    </div>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/feature-graphic-fireflies.050e67b5.jpg\";","export default __webpack_public_path__ + \"static/media/feature-graphic-mathsapp.829c7115.jpg\";","import styles from './Overview.module.css';\nimport firefliesFeatureGraphic from '../Images/feature-graphic-fireflies.jpg';\nimport mathsAppFeatureGraphic from '../Images/feature-graphic-mathsapp.jpg';\nimport { Link } from 'react-router-dom';\n\nexport function Overview() {\n  return (\n    <div className={styles['overview']}>\n      <div className={styles['app']}>\n        <Link to=\"/Fireflies\">\n          <img src={firefliesFeatureGraphic} alt=\"Fireflies\" />\n        </Link>\n      </div>\n      <div className={styles['app']}>\n        <Link to=\"/MathsApp\">\n          <img src={mathsAppFeatureGraphic} alt=\"MathsApp\" />\n        </Link>\n      </div>\n    </div>\n  );\n}\n","import { Link, Paper, Typography } from '@material-ui/core';\nimport styles from '../App.module.css';\n\nexport function PrivacyStatement() {\n  return (\n    <div className={styles['page-container']}>\n      <Paper className={styles['page']}>\n        <div className={styles['page-content']}>\n          <Typography variant=\"h1\">Privacy Statement</Typography>\n\n          <Typography variant=\"h2\">MathsApp</Typography>\n\n          <Typography variant=\"body1\">\n            MathsApp does not collect any personal data, or any data at all for that matter.\n          </Typography>\n\n          <Typography variant=\"h2\">Fireflies</Typography>\n\n          <Typography variant=\"body1\">\n            Fireflies uses Unity Ads and Unity Analytics. You can view details in{' '}\n            <Link href=\"https://unity3d.com/legal/privacy-policy\" target=\"_blank\">\n              Unity's privacy policy\n            </Link>\n            .\n          </Typography>\n\n          <Typography variant=\"h2\">The 4073Labs website</Typography>\n\n          <Typography variant=\"body1\">\n            The 4073Labs website does not collect any personal data, and does not use any cookies.\n          </Typography>\n\n          <Typography variant=\"h2\">Contact form messages and e-mail</Typography>\n\n          <Typography variant=\"body1\">\n            Questions and other comments sent to us by e-mail are saved for future reference, but only for the purpose\n            of improving future correspondence.\n          </Typography>\n\n          <Typography variant=\"h1\">Questions</Typography>\n\n          <Typography variant=\"body1\">\n            Should you have any questions regarding this privacy statement, or any other inquiries, please do not\n            hesitate to <Link href=\"/Contact\">contact us</Link>.\n          </Typography>\n        </div>\n      </Paper>\n    </div>\n  );\n}\n","import { Link, Paper, Typography } from '@material-ui/core';\nimport styles from '../App.module.css';\n\nexport function Contact() {\n  return (\n    <div className={styles['page-container']}>\n      <Paper className={styles['page']}>\n        <div className={styles['page-content']}>\n          <Typography variant=\"h1\">Contact</Typography>\n\n          <Typography variant=\"body1\">\n            Should you have any suggestions, feedback or other comments, please do not hesitate to contact us by sending\n            an e-mail to <Link href=\"mailto:contact@4073labs.com\">contact@4073labs.com</Link>.\n          </Typography>\n        </div>\n      </Paper>\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createMuiTheme, CssBaseline, ThemeProvider } from '@material-ui/core';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { Fireflies } from './Fireflies/Fireflies';\nimport './index.css';\nimport { MathsApp } from './MathsApp/MathsApp';\nimport { Overview } from './Overview/Overview';\nimport { PrivacyStatement } from './PrivacyStatement/PrivacyStatement';\nimport { Contact } from './Contact/Contact';\nimport reportWebVitals from './reportWebVitals';\n\nconst theme = createMuiTheme({\n  typography: {\n    h1: {\n      fontSize: 30,\n      marginTop: 20,\n      marginBottom: 10,\n    },\n    h2: {\n      fontSize: 22,\n      marginTop: 20,\n      marginBottom: 10,\n    },\n    h3: {\n      fontSize: 18,\n      marginTop: 20,\n      marginBottom: 10,\n    },\n    h4: {\n      fontSize: 16,\n      marginTop: 20,\n    },\n  },\n  props: {\n    MuiTooltip: {\n      interactive: true,\n      leaveDelay: 300,\n      enterTouchDelay: 0,\n      leaveTouchDelay: 10000,\n    },\n  },\n  overrides: {\n    MuiTooltip: {\n      tooltip: {\n        fontSize: '13px',\n      },\n    },\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <ThemeProvider theme={theme}>\n      <Router>\n        <Switch>\n          <Route path=\"/MathsApp\">\n            <MathsApp />\n          </Route>\n          <Route path=\"/Fireflies\">\n            <Fireflies />\n          </Route>\n          <Route path=\"/PrivacyStatement\">\n            <PrivacyStatement />\n          </Route>\n          <Route path=\"/Contact\">\n            <Contact />\n          </Route>\n          <Route path=\"/\">\n            <Overview />\n          </Route>\n        </Switch>\n      </Router>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('main')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}